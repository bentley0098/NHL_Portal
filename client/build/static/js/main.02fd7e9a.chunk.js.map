{"version":3,"sources":["components/Alerts/Alerter.jsx","components/Navigation.jsx","components/Footer.jsx","components/Home.jsx","components/Tasks/returnTasks.js","components/Logos/PDFLogo.png","components/excelExport.js","components/Tasks/NewTask.jsx","components/Tasks/MultiEdit.jsx","components/Tasks/Summary.jsx","components/Tasks/LoadDataSource.js","components/Tasks/Tasks.jsx","components/Support/SupportSummary.jsx","components/Support/QuickSupport.jsx","components/Report/components1/Closed.jsx","components/Report/components1/Reports.jsx","components/Report/components1/ReportMenu.jsx","components/Report/Report1.js","components/Alerts/Errors.jsx","components/Products/NewVersion.jsx","components/Products/Products.jsx","components/Login/HQicon.ico","components/Login/Login.js","App.js","useToken.js","reportWebVitals.js","index.js"],"names":["returnAlerts","fetch","then","response","json","Alerter","React","memo","props","useState","countNotification","setCountNotification","show","setShow","showAlert","setShowAlert","alerts","setAlerts","count","setCount","tempName","setTempName","useEffect","data","timer","setTimeout","clearTimeout","length","i","j","CustomerCode","ErrorCount","Customer_Name","history","useHistory","onRowDoubleClick","useCallback","rowProps","push","localStorage","setItem","JSON","stringify","onRenderRow","onDoubleClick","event","onRowClick","class","onClick","effect","Effect","SCALE","className","Toast","onClose","style","width","height","Header","Body","idProperty","columns","name","header","minWidth","type","maxWidth","dataSource","minHeight","margin","theme","Alert","variant","dismissible","closeLabel","withRouter","tokenString","sessionStorage","getItem","Username","parse","username","setInterval","to","location","pathname","removeItem","window","reload","Footer","Home","getHistory","taskID","addNote","note","UserID","Minutes","requestOptions","method","headers","body","Notes","Task","userid","minutes","updateTask","taskObject","customerName","customerCode","departmentCode","userId","Company_Name","Account","Department","ActionByUserID","Issue_No","Details","Area","Reference2","Application","Reference","Contact","Reference3","Estimate","Reference4","Priority","Invoice","DueDate","Requested","User","addNewTask","newTaskNo","CustomerName","newDetails","newPriority","dueDate","reqDate","user","userID","ref1","contact","ref2","notes","estimate","invoice","urgent","ReqDate","Reference1","Urgent","getNewTaskID","a","newtaskID","returnCustomers","customers","returnDepartments","departments","returnUsers","id","thisTask","reasons","openHistory","makeUrgent","taskId","input","closeItem","itemId","string","itemID","downloadBlob","blob","fileName","link","document","createElement","url","URL","createObjectURL","setAttribute","position","visibility","appendChild","click","removeChild","HQDetails","NewTask","currentUserObj","filterUser","UserId","currentDepFilter","filterDepartment","currentCustFilter","filterCustomer","userToken","setDepartments","setCustomers","users","setUsers","mounted","showNewTask","setShowNewTask","fortnight","Date","setDate","getDate","setDueDate","setReqDate","setNewDetails","setNewTaskNo","newCustomer","setNewCustomer","newDepartment","setNewDepartment","newUser","setNewUser","newRef1","setNewRef1","newContact","setNewContact","newRef2","setNewRef2","newNotes","setNewNotes","newInvoice","setNewInvoice","newEstimate","setNewEstimate","newTaskPriority","setNewTaskPriority","setUrgent","emailBody","setEmailBody","handleCloseNewTask","setInputList","item","onSubmitNewTask","newDueDate","moment","format","newReqDate","DepToAdd","CustToAdd","undefined","Code","task","alert","onTaskCreate","inputList","forEach","e","details","addItem","nextTaskNum","thisDueDate","textToCopy","navigator","clipboard","isSecureContext","writeText","textArea","value","left","top","focus","select","Promise","res","rej","execCommand","remove","copyToClipboard","catch","console","log","handleAddClick","OverlayTrigger","placement","overlay","Tooltip","Button","getElementById","Modal","onHide","size","closeButton","Title","Form","Row","Col","Group","controlId","Control","as","onChange","target","map","customer","index","department","rows","placeholder","marginTop","xs","Label","selected","date","dateFormat","calendarStartDay","Check","inline","label","display","x","list","handleInputChange","splice","handleRemoveClick","right","open","MultiEdit","showMultiEdit","setShowMultiEdit","handleCloseMultiEdit","tempPriority","setTempPriority","tempDueDate","setTempDueDate","editIsDisabled","disabled","selectedIds","Object","keys","key","duedate","newduedate","tasks","priority","editMultiple","Summary","r1","setR1","r2","setR2","r3","setR3","w1","setW1","w2","setW2","w3","setW3","s1","setS1","s2","setS2","s3","setS3","g1","setG1","g2","setG2","g3","setG3","n1","setN1","n2","setN2","n3","setN3","userSource","p1","p2","p3","getDataSource","priorities","p","result","All","numbers","sort","b","defaultSortInfo","dir","ProgressBar","now","LoadDataSource","showingClosed","filterCustCode","taskAmount","filterPriority","isShowClosed","newDataSource","rowClassName","State","itemRowClassName","Complete","Tasks","AllCustomers","AllDepartments","AllUsers","setDataSource","itemDataSource","setItemDataSource","setTaskAmount","setFilterUser","setFilterPriority","setFilterCustomer","setFilterDepartment","setShowingClosed","reLoadDataExt","Customer_Code","setSelected","gridRef","setGridRef","noteValue","setNoteValue","historyMinutes","setHistoryMinutes","setTaskID","setHistory","updateDueDate","setUpdateDueDate","updateReqDate","setUpdateReqDate","taskToUpdate","setTaskToUpdate","editCustomer","setEditCustomer","editDepartment","setEditDepartment","editUser","setEditUser","departmentValue","setDepartmentValue","tasksUser","setTasksUser","closedStatus","setClosedStatus","showCloseTask","setShowCloseTask","handleClose","setSelectedItems","getSelectedTask","ActionBy","taskDate","dataSourceArray","onSubmit","selectedItems","setReasons","reasonToClose","setReasonToClose","closingMinutes","setClosingMinutes","timeSpent","setTimeSpent","handleCloseCloseTask","handleShowCloseTask","TimeSpent","returnReasons","onSelectionChange","onSelectionItemChange","defaultFlex","showPrompt","setShowPrompt","handleClosePrompt","current","toString","replace","wb","Sheets","XLSX","json_to_sheet","SheetNames","excelBuffer","bookType","Blob","exportCSV","gridData","doc","jsPDF","closedIndex","urgentIndex","p1Index","bodyData","Updated","ActionByUsername","Owner_Name","P","rowData","formatDate","headerText","autoTable","styles","fontSize","headStyles","fillColor","head","didParseCell","row","cell","fontStyle","raw","didDrawPage","setFontSize","setTextColor","PDFLogo","addImage","text","settings","docName","titleDate","save","exportPDF","handle","marginRight","marginLeft","checkboxColumn","backdrop","Margin","reOpenTask","Tabs","onSelect","k","Tab","eventKey","title","editable","UserName","prevTask","defaultVisible","Reason","reason","closingNote","reasonCode","closeTask","SupportSummary","returnSupportSummary","summary","QuickSupport","AllReasons","setCustomer","setDetails","selectedReason","setSelectedReason","setMinutes","showOther","setShowOther","phone","setPhone","email","setEmail","remote","setRemote","siteVisit","setSiteVisit","outOfHours","setOutOfHours","validated","setValidated","formRef","useRef","handleReset","reset","currentCustomer","marginBottom","ref","backgroundColor","support","SupportCode","Phone","Email","Site","Remote","OutOfHours","addQuickSupport","Closed","tomorrow","startDate","setStartDate","endDate","setEndDate","sDate","eDate","getClosedTasks","bottom","DateCompleted","DaysToComplete","exportClosedPDF","selectsStart","selectsEnd","minDate","Reports","setLabels","setTaskReportData","setSupportReportData","setData","tempLabels","taskData","supportData","getTimeSpent","report","TaskTime","SupportTime","Customer","Container","temp","BarChart","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Bar","fill","ReportMenu","breakpoint","iconShape","icon","Report1","path","exact","component","returnErrors","code","Errors","errorList","setErrorList","setCurrentCustomer","reLoadGrid","detail","processErrorReviewed","processErrorConfirmed","NewVersion","version","setVersion","sql","setSQL","comment","setComment","productID","Version","ProductID","addUpdateHeader","product","updateId","UpdateId","Comment","addUpdateDetail","Sql","addUpdateSQL","ProductName","Products","noSelected","MailingList","ProductURL","currentProduct","setCurrentProduct","products","setProducts","onChangeSelect","href","loginUser","credentials","Login","setToken","setUserName","password","setPassword","handleSubmit","checkDueDate","preventDefault","token","src","HQicon","alt","constrolId","App","getToken","useToken","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.02fd7e9a.chunk.js","sourcesContent":["import React, {useState, useEffect, useCallback} from 'react'\nimport { Link, withRouter } from \"react-router-dom\";\n//ReactDataGrid.io used for main grid\nimport ReactDataGrid from '@inovua/reactdatagrid-community'\nimport '@inovua/reactdatagrid-community/base.css'\nimport '@inovua/reactdatagrid-community/index.css'\nimport '@inovua/reactdatagrid-community/theme/default-dark.css'\n\nimport {FaRegBell} from 'react-icons/fa';\nimport './alerts.css';\n\nimport NotificationBadge from 'react-notification-badge';\nimport {Effect} from 'react-notification-badge';\n\nimport Toast from 'react-bootstrap/Toast'\nimport Alert from 'react-bootstrap/Alert'\n\nimport { useHistory } from 'react-router-dom';\n\nconst returnAlerts = () => {\n  return fetch('/returnAlerts').then(response => {\n    return response.json()\n  });\n}\n\nconst Alerter = React.memo( props => {\n\n\n    const [ countNotification, setCountNotification ] = useState(0);\n    const [show, setShow] = useState(false);\n    const [showAlert, setShowAlert] = useState(false);\n\n    const [alerts, setAlerts] = useState([]);\n\n    const showAlertList = () => {\n        //console.log(\"SHOW ME MY ALERTS\");\n        setShow(true);\n        \n        //setShowAlert(true);\n        \n        //setTimeout(() => {\n        //    setShowAlert(false);\n        //    console.log(\"test\");\n        //}, 2000)\n    }\n\n    const [count, setCount] = useState(0);\n\n    const [tempName, setTempName] = useState(\"\");\n\n    var test = [];\n    useEffect(() => {\n      if (count === 0) { // condition for checking if the API call being made is initial one or not.\n        returnAlerts().then((data) => {\n          setCount(count + 1);\n          setAlerts(data);\n        });\n        //console.log(count);\n      } else {\n        //console.log(count);\n        const timer = setTimeout(() => {\n          returnAlerts().then((data) => {\n            setCount(count + 1);\n            clearTimeout(timer);\n            //console.log(test);\n\n            if(alerts!==[]) {\n              //loop through 'alerts', check against data before setting new data as alerts\n\n              //console.log(data);\n              //console.log(alerts.length);\n\n              if(alerts.length<data.length && count>3){\n               \n                setTempName(\"New_Customer_in_HQS_ERRORS\"); \n                \n                setShowAlert(true);\n              }\n\n              for(let i=0; i<alerts.length; i++) {\n                for(let j=0; j<data.length; j++) {\n                  if(alerts[i].CustomerCode===data[j].CustomerCode){\n                    //same customer code\n                    if(alerts[i].ErrorCount<data[j].ErrorCount){\n                      //alert(\"You have a new error for: \" + data[j].Customer_Name);\n                      setTempName(data[j].Customer_Name);\n                      setShowAlert(true);\n                      setCountNotification(countNotification+1);\n                    }\n                  }\n                }\n              }  \n            }\n            test = data;\n\n            //console.log(\"ALERT CHECK\");\n            setAlerts(data);\n          });\n        }, 30000);\n      }\n\n      //console.log(alerts);\n    }, [count]);\n    \n    const theme = 'default-dark';\n    const columns = [\n      {name: 'Customer_Name', header: 'Company', minWidth:200, type: 'string'},\n      {name: 'ErrorCount', header: 'Errors', maxWidth:100, type: 'number'}\n    ]\n    const gridStyle = { minHeight:250, margin:5 }\n    \n\n    const history = useHistory();\n\n    function handleClick() {\n      \n    }\n\n\n    const onRowDoubleClick = useCallback((rowProps) => { \n      //console.log(rowProps.data);\n      history.push(\"/Errors\");\n      localStorage.setItem('CustomerErrorCheck', JSON.stringify(rowProps.data));\n\n      setShow(false);\n    }, []);\n\n    //Double click to bring up Error List\n    const onRenderRow = useCallback((rowProps) => {\n      const { onDoubleClick } = rowProps;      \n      \n      rowProps.onDoubleClick = (event) => {\n        onRowDoubleClick(rowProps);\n        if (onDoubleClick) {\n          onDoubleClick(event);\n        }\n      };\n      \n    }, [onRowDoubleClick])\n    \n    const onRowClick = useCallback((rowProps, event) => {\n      //Use this function if single clcik is needed\n    }, [])\n\n\n    \n    return(\n        <>\n        <Link class=\"nav-link\" onClick={() => {\n          showAlertList();\n          setCountNotification(0);\n        }}>\n          <NotificationBadge count={countNotification} effect={Effect.SCALE} />\n          <FaRegBell />\n        </Link>\n\n\n        <div className=\"alerts-toast\">\n            <Toast onClose={() => setShow(false)} show={show} style={{width:'330px', height: '330px'}} >\n          <Toast.Header>\n            <strong className=\"me-auto\">Alerts</strong>\n          </Toast.Header>\n          <Toast.Body>\n          <ReactDataGrid \n                idProperty=\"id\"\n                columns={columns}\n                dataSource={alerts}\n                style={gridStyle}\n                theme={theme}\n                onRenderRow={onRenderRow}\n                onRowClick={onRowClick}\n              />\n          </Toast.Body>\n        </Toast> \n        </div>\n\n        { \n            showAlert &&   \n            <div className={'alert-notification'}>\n                <Alert key={1} onClose={() => setShowAlert(false)} variant={'danger'} dismissible closeLabel={'Dismiss'}>\n                {tempName} has a new error\n                </Alert>\n            </div>\n        }\n        \n        </>\n    )\n})\n\nexport default Alerter;","import React, {useState} from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\n\nimport {FaRegBell} from 'react-icons/fa'\n\nimport NotificationBadge from 'react-notification-badge';\nimport {Effect} from 'react-notification-badge';\n\nimport './components.css'\nimport Alerter from \"./Alerts/Alerter\";\n\nfunction Navigation(props) {\n  const tokenString = sessionStorage.getItem('token');\n  const userToken = JSON.parse(tokenString);\n  const Username = userToken.username;\n\n  const logout = () => {\n    sessionStorage.removeItem('token');\n    window.location.reload(false);\n  }\n\n  // -- ALERTS --//\n\n  const [ count, setCount ] = useState(1);\n  const timerId = setInterval(() => {\n    //console.log('Check for ALERTS here');\n    \n  }, 60000);\n\n  return (\n    <div className=\"navigation\">\n      <nav class=\"navbar navbar-expand navbar-dark grid-bg-colour\">\n        <div class=\"container\">\n          <Link class=\"navbar-brand\" to=\"/\">\n            {Username}'s HQ BUSINESS\n          </Link>\n          \n          \n          <div>\n            <ul class=\"navbar-nav ml-auto\">\n              <li\n                class={`nav-item  ${\n                  props.location.pathname === \"/\" ? \"active\" : \"\"\n                }`}\n              >\n                <Link class=\"nav-link\" to=\"/\">\n                  Tasks\n                  <span class=\"sr-only\">(current)</span>\n                </Link>\n              </li>\n\n              <li\n                class={`nav-item  ${\n                  props.location.pathname === \"/Report1\" ? \"active\" : \"\"\n                }`}\n              >\n                <Link class=\"nav-link\" to=\"/Report1\">\n                    Reports\n                </Link>\n              </li>\n\n              <li\n                class={`nav-item  ${\n                  props.location.pathname === \"/Support\" ? \"active\" : \"\"\n                }`}\n              >\n                <Link class=\"nav-link\" to=\"/Support\">\n                    Support\n                </Link>\n              </li>\n\n              <li\n                class={`nav-item  ${\n                  props.location.pathname === \"/Products\" ? \"active\" : \"\"\n                }`}\n              >\n                <Link class=\"nav-link\" to=\"/Products\">\n                  Products\n                </Link>\n              </li>\n\n              <li>\n                <Alerter />\n              </li>\n              <li>\n                <div className=\"spacer\"></div>\n              </li>\n              <li\n                class={`nav-item  ${\n                  props.location.pathname === \"/Login\" ? \"active\" : \"\"\n                }`}\n              >\n                <Link class=\"nav-link\" to=\"/\" onClick={logout}>\n                    Sign Out\n                </Link>\n              </li>\n            </ul>\n            \n          </div>\n        </div>\n      </nav>\n    </div>\n  );\n}\n\nexport default withRouter(Navigation);","import React from \"react\";\nimport './components.css'\n\nfunction Footer() {\n  return (\n    <div className=\"footer\">\n      <footer class=\"py-3 grid-bg-colour fixed-bottom\">\n        <div class=\"container\">\n          <p class=\"m-0 text-center text-white\">\n            Copyright &copy; HQ Software 2021, v1.66\n          </p>\n        </div>\n      </footer>\n    </div>\n  );\n}\n\nexport default Footer; ","import React from \"react\";\n\nfunction Home() {\n  const tokenString = localStorage.getItem('token');\n  const userToken = JSON.parse(tokenString);\n  const Username = userToken.username;\n        \n  \n  return (\n    <div className=\"home\">\n      <div class=\"container\">\n        <div class=\"row align-items-center my-5\">\n          \n          <div class=\"col-lg-5\">\n            <h1 class=\"font-weight-light\">Welcome {Username}</h1>\n            <p>\n              Lorem Ipsum is simply dummy text of the printing and typesetting\n              industry. Lorem Ipsum has been the industry's standard dummy text\n              ever since the 1500s, when an unknown printer took a galley of\n              type and scrambled it to make a type specimen book.\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Home;","//export function getTasks() {\n//    return fetch('/queryTasks')\n//      .then(data => data.json())\n//  }\n\nexport function getHistory(taskID) {\n  return fetch('/taskHistory/' + taskID)\n    .then(data => data.json())\n}\n\nexport function addNote(note, taskID, UserID, Minutes) {\n  const requestOptions = {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({\n      Notes: note,\n      Task: taskID,\n      userid: UserID,\n      minutes: Minutes\n    })\n  }\n  return fetch('/addHistory/', requestOptions)\n   \n}\n\nexport function updateTask(taskObject, customerName, customerCode, departmentCode, userId) {\n\n  if(!customerName) {\n    customerName=taskObject.Company_Name;\n    customerCode=taskObject.Account;\n  }\n  if(!departmentCode) {\n    departmentCode = taskObject.Department;\n  }\n  if(!userId) {\n    userId = taskObject.ActionByUserID;\n  }\n  //console.log(taskObject);\n  const requestOptions = {\n    method: 'PUT',\n    headers: { 'Content-Type': 'application/json'},\n    body: JSON.stringify({\n      Task : taskObject.Issue_No,\n      Details: taskObject.Details,\n      Notes: taskObject.Notes,\n      Area: taskObject.Reference2,\n      Application: taskObject.Reference,\n      Contact: taskObject.Reference3,\n      Estimate: taskObject.Reference4,\n      Priority: taskObject.Priority,\n      Invoice: taskObject.Invoice,\n      DueDate: taskObject.DueDate,\n      Requested: taskObject.Requested,\n      Company_Name: customerName,\n      Account: customerCode,\n      Department: departmentCode,\n      User: userId\n    })\n  }\n  return fetch('/updateTask/', requestOptions)\n}\n\n\nexport function addNewTask(newTaskNo, CustomerName,CustomerCode, newDetails, newPriority, dueDate, reqDate, departmentCode, user, userID, ref1, contact, ref2, notes, estimate, invoice, urgent) {\n  const requestOptions = {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({\n      Details: newDetails,\n      Task: newTaskNo,\n      CustomerName: CustomerName,\n      CustomerCode: CustomerCode,\n      Priority: newPriority,\n      DueDate: dueDate,\n      ReqDate: reqDate,\n      Department: departmentCode,\n      User: user,\n      Reference1: ref1,\n      Contact: contact,\n      Reference2: ref2,\n      Notes: notes,\n      Estimate: estimate,\n      Invoice: invoice,\n      UserID: userID,\n      Urgent: urgent\n    })\n  }\n  return fetch('/addNewTask/', requestOptions)\n   \n}\n\nexport async function getNewTaskID() {\n  const response = await fetch('/newTaskId');\n  const newtaskID = await response.json();\n  return newtaskID\n}\n\nexport async function returnCustomers() {\n  const response = await fetch('/returnCustomers');\n  const customers = await response.json();\n  return customers\n}\n\nexport async function returnDepartments() {\n  const response = await fetch('/returnDepartments');\n  const departments = await response.json();\n  return departments\n}\n\nexport async function returnUsers() {\n  const response = await fetch('/returnUsers');\n  const departments = await response.json();\n  return departments\n}\n\nexport async function getSelectedTask(id) {\n  const response = await fetch('/returnSelectedTask/' + id);\n  const thisTask = await response.json();\n  return thisTask\n}\n    \nexport async function returnReasons() {\n  const response = await fetch('/returnReasons');\n  const reasons = await response.json();\n  return reasons\n}\n\nexport function closeTask(taskID, reasonCode, minutes) {\n  var date = new Date();\n  \n  const requestOptions = {\n    method: 'PUT',\n    headers: { 'Content-Type': 'application/json'},\n    body: JSON.stringify({\n      Task : taskID,\n      Code: reasonCode,\n      Minutes: minutes,\n      Date: date\n    })\n  }\n  return fetch('/closeTask/', requestOptions)\n}\n\nexport function editMultiple( selectedIds, newPriority, newduedate ) {\n  let string = JSON.stringify(selectedIds);\n  //console.log(JSON.parse(string));\n  //console.log(newPriority);\n  const requestOptions = {\n    method: 'PUT',\n    headers: { 'Content-Type': 'application/json'},\n    body: JSON.stringify({\n      tasks: string,\n      priority: newPriority,\n      duedate: newduedate\n    })\n  }\n\n  //console.log(requestOptions);\n  return fetch('/editMultiple', requestOptions)\n}\n\nexport function openHistory(newTaskNo, UserID) {\n  const requestOptions = {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json'},\n    body: JSON.stringify({\n      taskID: newTaskNo,\n      userid: UserID\n    })\n  }\n\n  return fetch('/openHistory', requestOptions)\n}\n\nexport function reOpenTask(task) {\n  const requestOptions = {\n    method: 'PUT',\n    headers: { 'Content-Type': 'application/json'},\n    body: JSON.stringify({\n      taskID: task\n    })\n  }\n  return fetch('/reOpenTask', requestOptions)\n}\n\n\nexport const getSummary = (userID, priority) =>{\n  return fetch('/getSummary/' + userID + '&' + priority).then(response => {\n      return response.json()\n  });\n}\n\nexport function makeUrgent (taskId, input) {\n  const requestOptions = {\n    method: 'PUT',\n    headers: { 'Content-Type': 'application/json'},\n    body: JSON.stringify({\n      taskID: taskId,\n      input: input\n    })\n  }\n  return fetch('/makeUrgent', requestOptions)\n}\n\nexport function getItems (taskId) {\n  return fetch('/getItems/' + taskId).then(response => {\n    return response.json()\n  });\n}\n\nexport function closeItem (itemId, input) {\n  let string = JSON.stringify(itemId);\n \n  const requestOptions = {\n    method: 'PUT',\n    headers: { 'Content-Type': 'application/json'},\n    body: JSON.stringify({\n      itemID: string,\n      input: input\n    })\n  }\n  return fetch('/closeItem', requestOptions)\n}\n\nexport function getTimeSpent (taskId) {\n  return fetch('/getTimeSpent/' + taskId).then(response => {\n    return response.json()\n  });\n}","export default __webpack_public_path__ + \"static/media/PDFLogo.d3482e1c.png\";","import jsPDF from 'jspdf'\nimport 'jspdf-autotable'\nimport PDFLogo from './Logos/PDFLogo.png'\n\nimport * as XLSX from 'xlsx';\n\nimport moment from 'moment'\n\nexport const exportCSV = (gridRef) => {\n    //const columns = gridRef.current.visibleColumns;\n\n    const fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\n    \n    // Reformatting GridRef for inputing into csv file\n    gridRef.current.data.map((data) => {\n      data.Details = data.Details.toString().replace(',','');\n      data.[\"Last Comment\"] = data.[\"Last Comment\"].toString().replace(',','');\n      data.Details = data.Details.replace(/(\\r\\n|\\n|\\r)/gm, \"\");\n      return null;\n    });\n\n    //const header = columns.map((c) => c.name).join(',');\n    //const rows = gridRef.current.data.map((data) => columns.map((c) => data[c.id]).join(','));\n    //const contents = [header].concat(rows).join('\\n');\n\n    const ws = XLSX.utils.json_to_sheet(gridRef.current.data);\n    const wb = { Sheets: { 'data': ws }, SheetNames: ['data'] };\n    const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\n    const blob = new Blob([excelBuffer], {type: fileType});\n\n    //const blob = new Blob([contents], { type: 'text/csv;charset=utf-8;' });\n    downloadBlob(blob);\n};\n\n\nconst downloadBlob = (blob, fileName = 'HQB_TASKS.xlsx') => {\n    const link = document.createElement('a');\n    const url = URL.createObjectURL(blob);\n    \n    link.setAttribute('href', url);\n    link.setAttribute('download', fileName);\n    link.style.position = 'absolute';\n    link.style.visibility = 'hidden';\n  \n    document.body.appendChild(link);\n  \n    link.click();\n  \n    document.body.removeChild(link);\n};\n\n\nexport function  exportPDF(gridData, customer) {\n  var doc = new jsPDF('landscape', 'pt');\n  var closedIndex = [];\n  var urgentIndex = [];\n  var p1Index = [];\n  \n  //console.log(gridData.current.data);\n  var bodyData= [[\n    gridData.current.data[0].Task, \n    gridData.current.data[0].Details, \n    gridData.current.data[0].Area, \n    gridData.current.data[0].Application,\n    gridData.current.data[0].Requested,\n    gridData.current.data[0].[\"Last Comment\"],\n    gridData.current.data[0].Updated,\n    gridData.current.data[0].DueDate,\n    gridData.current.data[0].Priority,\n    gridData.current.data[0].ActionByUsername,\n    gridData.current.data[0].Owner_Name\n  ]];\n\n  if(gridData.current.data[0].State===\"C\") {\n    closedIndex.push(0);\n  }\n\n  if(gridData.current.data[0].Urgent===true) {\n    urgentIndex.push(0);\n  }\n\n  if(gridData.current.data[0].P===1) {\n    p1Index.push(0);\n  }\n\n  for(let i=1; i<gridData.current.data.length; i++){\n    var rowData = [\n      gridData.current.data[i].Task, \n      gridData.current.data[i].Details, \n      gridData.current.data[i].Area, \n      gridData.current.data[i].Application,\n      gridData.current.data[i].Requested,\n      gridData.current.data[i].[\"Last Comment\"], \n      gridData.current.data[i].Updated,\n      gridData.current.data[i].DueDate,\n      gridData.current.data[i].Priority,\n      gridData.current.data[i].ActionByUsername,\n      gridData.current.data[i].Owner_Name\n    ];\n    \n    if(gridData.current.data[i].State===\"C\") {\n      closedIndex.push(i);\n    }\n\n    if(gridData.current.data[i].Urgent===true) {\n      urgentIndex.push(i);\n    }\n\n    if(gridData.current.data[i].P===1) {\n      p1Index.push(i);\n    }\n    \n    bodyData.push(rowData);\n\n  }\n\n  let formatDate = moment(new Date()).format(\"Do MMMM YYYY\"); \n  \n  let headerText = customer.CustomerName + \" Report    -    \" + formatDate;\n\n  \n  \n  doc.autoTable({\n    styles: { fontSize: 8 },\n    theme: 'grid',\n    headStyles: {fillColor: [55, 55, 55]},\n    head: [['Task', 'Details', 'Area', 'Section', 'Requested', 'Status', 'Updated', 'Due Date', 'P', 'User', 'Owner']],\n    body: bodyData,\n    didParseCell: function(data) {\n      \n      for (let i=0; i<closedIndex.length; i++) {\n        if(data.row.index===closedIndex[i]){\n          data.cell.styles.fillColor= [87, 222, 107]\n        }\n      }\n      for (let i=0; i<urgentIndex.length; i++) {\n        if(data.row.index===urgentIndex[i]){\n          data.cell.styles.fontStyle= \"bold\";\n        }\n      }\n      for (let i=0; i<p1Index.length; i++) {\n        if(data.row.index===p1Index[i] && data.cell.raw===1){\n          //console.log(data);\n          data.cell.styles.fillColor= [255, 157, 156]\n        }\n      }\n    },\n    didDrawPage: function (data) {\n      // Header\n      doc.setFontSize(18)\n      doc.setTextColor(40)\n      if (PDFLogo) {\n        doc.addImage(PDFLogo, 'png', 20, 20, 46.5, 48, PDFLogo, 'FAST', 0)\n      }\n      doc.text(headerText, data.settings.margin.left + 50, 50)\n\n      doc.setFontSize(8)\n\n     \n    },\n    margin: { top: 80 }\n  })\n\n  var docName = '';\n\n  let titleDate = moment(new Date()).format(\"DDMMYYYY\"); \n\n  if(customer.Customer_Code===0){\n    docName = 'HQSoftware_TASKS.pdf';\n  } else {\n    docName = customer.CustomerName + '_TASKS_' + titleDate\n  }\n\n  doc.save(docName)\n}\n\n\nexport function  exportClosedPDF(gridData, customer) {\n  var doc = new jsPDF('landscape', 'pt');\n  var closedIndex = [];\n  \n\n  var bodyData= [[\n    gridData.current.data[0].Task, \n    gridData.current.data[0].Details, \n    gridData.current.data[0].Requested,\n    gridData.current.data[0].DateCompleted, \n    gridData.current.data[0].DaysToComplete,\n    gridData.current.data[0].TimeSpent,\n    gridData.current.data[0].ActionByUsername\n  ]];\n\n  if(gridData.current.data[0].State===\"C\") {\n    closedIndex.push(0);\n  }\n\n  for(let i=1; i<gridData.current.data.length; i++){\n    var rowData = [\n    gridData.current.data[i].Task, \n    gridData.current.data[i].Details, \n    gridData.current.data[i].Requested,\n    gridData.current.data[i].DateCompleted, \n    gridData.current.data[i].DaysToComplete,\n    gridData.current.data[i].TimeSpent,\n    gridData.current.data[i].ActionByUsername\n    ];\n    \n    if(gridData.current.data[i].State===\"C\") {\n      closedIndex.push(i);\n    }\n    bodyData.push(rowData);\n\n  }\n\n  let formatDate = moment(new Date()).format(\"Do MMMM YYYY\"); \n  \n  let headerText = customer.CustomerName + \" Closed Tasks    -    \" + formatDate;\n\n  \n  \n  doc.autoTable({\n    styles: { fontSize: 8 },\n    theme: 'grid',\n    headStyles: {fillColor: [55, 55, 55]},\n    head: [['Task', 'Details', 'Requested', 'Completed', 'Days', 'Time', 'User']],\n    body: bodyData,\n    didParseCell: function(data) {\n      \n      for (let i=0; i<closedIndex.length; i++) {\n        if(data.row.index===closedIndex[i]){\n          data.cell.styles.fillColor= [87, 222, 107]\n        }\n      }\n    },\n    didDrawPage: function (data) {\n      // Header\n      doc.setFontSize(18)\n      doc.setTextColor(40)\n      if (PDFLogo) {\n        doc.addImage(PDFLogo, 'png', 20, 20, 46.5, 48, PDFLogo, 'FAST', 0)\n      }\n      doc.text(headerText, data.settings.margin.left + 50, 50)\n\n      doc.setFontSize(8)\n\n     \n    },\n    margin: { top: 80 }\n  })\n\n  var docName = '';\n\n  let titleDate = moment(new Date()).format(\"DDMMYYYY\"); \n\n  if(customer.Customer_Code===0){\n    docName = 'HQSoftware_CLOSEDTASKS.pdf';\n  } else {\n    docName = customer.CustomerName + '_CLOSEDTASKS_' + titleDate\n  }\n\n  doc.save(docName)\n}","import React, {useState, useEffect, forwardRef} from 'react';\nimport moment from 'moment'\n\n\nimport Button from 'react-bootstrap/Button'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport Modal from 'react-bootstrap/Modal'\nimport Form from 'react-bootstrap/Form'\nimport DatePicker from 'react-datepicker'\n\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger'\nimport Tooltip from 'react-bootstrap/Tooltip'\n\n\n\nimport {addNewTask, getNewTaskID, returnCustomers, returnDepartments, returnUsers, openHistory} from './returnTasks.js'\n\nimport {HiOutlineMail} from \"react-icons/hi\";\nimport {RiFileAddLine} from \"react-icons/ri\"\nimport {BiPlus, BiMinus } from \"react-icons/bi\"\n\n\n\n\nconst HQDetails={\n    'SupportCode' : 0,\n    'Customer_Code' : 340,\n    'CustomerName' : \"HQ Software\",\n    'CustomerCode': 340\n}\n\n\nfunction addItem(task, details) {\n  const requestOptions = {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({\n      Details: details,\n      taskID: task\n    })\n  }\n  return fetch('/addItem/', requestOptions)\n   \n}\n\n\n\n\nconst NewTask = React.memo( props => {\n  //console.log(\"NewTask Render\");\n  //console.log(props);\n  \n  const currentUserObj = {\n    'UserId': props.filterUser.UserId,\n    'Username':  props.filterUser.Username\n  }\n  const currentDepFilter = props.filterDepartment;\n  const currentCustFilter = props.filterCustomer;\n  \n  //----- GET CURRENT USER -----//\n  const tokenString = sessionStorage.getItem('token');\n  const userToken = JSON.parse(tokenString);\n  const Username = userToken.username;\n  const UserID = userToken.userId;\n  //-----------//\n    //setting departments/users/customers for drop downs\n  const [departments, setDepartments] = useState([]);\n  const [customers, setCustomers] = useState([]);\n  const [users, setUsers] = useState([]);\n   // Use Effect Hook to load data for the grid when webpage is loaded\n   useEffect(() => {\n    let mounted = true;\n    \n    returnCustomers()\n      .then(customers => {\n        if(mounted) {\n          setCustomers(customers)\n        }\n      })\n    returnDepartments()\n      .then(departments => {\n        if(mounted) {\n          setDepartments(departments);\n        }\n      })\n    returnUsers()\n      .then(users => {\n        if(mounted) {\n          setUsers(users)\n        }\n      })\n\n    return () => mounted = false;\n  }, [])\n\n//-----NEW TASK-----//  \n\n    const [showNewTask, setShowNewTask] = useState(false);\n    const [showAlert, setShowAlert] = useState(false);\n    \n    //States inserting new values into the new task created\n\n    var fortnight = new Date();\n    fortnight.setDate(fortnight.getDate()+14);\n\n    const [dueDate, setDueDate] = useState(fortnight);\n    const [reqDate, setReqDate] = useState(new Date());\n    const [newDetails, setNewDetails] = useState(\"\");\n    const [newTaskNo, setNewTaskNo] = useState();\n    const [newCustomer, setNewCustomer] = useState({});\n    const [newDepartment, setNewDepartment] = useState({});\n    const [newUser, setNewUser] = useState([]);\n    const [newRef1, setNewRef1] = useState(\"\");\n    const [newContact, setNewContact] = useState(\"\");\n    const [newRef2, setNewRef2] = useState(\"\");\n    const [newNotes, setNewNotes] = useState(\"\");\n    const [newInvoice, setNewInvoice] = useState(\"\");\n    const [newEstimate, setNewEstimate] = useState(\"\");\n    const [newTaskPriority, setNewTaskPriority] = useState(2);\n\n    const [urgent, setUrgent] = useState(null);\n\n    \n\n    const [emailBody, setEmailBody] = useState(\"\");\n\n    //Functions to handle show/hide modal\n    const handleCloseNewTask = () => { \n        setShowNewTask(false); \n\n        setTimeout(()=> {\n          //Resets all values after modal is closed\n          var fortnight = new Date();\n          fortnight.setDate(fortnight.getDate()+14);\n\n          setNewDetails(\"\");\n          setNewTaskPriority(2);\n          setDueDate(fortnight);\n          setReqDate(new Date());\n          setNewRef1(\"\");\n          setNewContact(\"\");\n          setNewRef2(\"\");\n          setNewNotes(\"\");\n          setNewEstimate(\"\");\n          setNewInvoice(\"\");\n          setNewDepartment({});\n          setNewCustomer({});\n          \n          setUrgent(null);\n\n          setInputList([{item: \"\"}]);\n        }, 200)\n          \n    }\n    \n    const handleShowNewTask = () => {\n      setShowNewTask(true);\n      setNewUser(currentUserObj);\n      \n      setTimeout(()=> {\n        document.getElementById(`inline-newTask-radio-${newTaskPriority}`).click();\n      },10)\n    }\n\n    //Function that handles the submit button for adding a new task\n    const onSubmitNewTask = () => {\n       \n\n        //Set Dates to correct format\n        var newDueDate = moment(dueDate).format('YYYY-MM-DD hh:mm:ss');\n        var newReqDate = moment(reqDate).format('YYYY-MM-DD hh:mm:ss'); \n        \n        var DepToAdd = {};\n        var CustToAdd = {};\n        \n        //console.log(newCustomer);\n        //console.log(currentCustFilter);\n        if(newCustomer.CustomerCode===undefined) {\n          CustToAdd = currentCustFilter;\n        } else {\n          CustToAdd = newCustomer;\n        }\n        //console.log(CustToAdd);\n        if(newDepartment.Code===undefined){\n          DepToAdd = currentDepFilter;\n        } else {\n          DepToAdd = newDepartment;\n        }\n        //console.log(DepToAdd);\n        //console.log(newUser);\n        getNewTaskID().then(task=> {\n          setNewTaskNo(task.[0].[\"\"])\n        //Check if Customer and Department have been Selected before adding new task\n          if(CustToAdd.CustomerCode===0){\n            alert(\"Please Select a Customer\");\n          } else if(DepToAdd.Code===0) {\n            alert (\"Please Select a Department\");\n          } else if(newUser.UserId === 0) {\n            alert (\"Please Select a User\");\n          }else{\n            //console.log(task.[0].[\"\"]);\n            addNewTask(task.[0].[\"\"], CustToAdd.CustomerName, CustToAdd.CustomerCode, newDetails, newTaskPriority, newDueDate, newReqDate, DepToAdd.Code, Username, newUser.UserId, newRef1, newContact, newRef2, newNotes, newEstimate, newInvoice, urgent);\n            openHistory(task.[0].[\"\"], UserID);\n            onTaskCreate(task.[0].[\"\"]);\n            \n\n            if(inputList!==[{item: \"\"}]){\n              inputList.forEach(e => {\n                addItem(task.[0].[\"\"], e.item);\n              })\n            }\n            \n\n            handleCloseNewTask();\n          }\n        \n          //Reload task data\n          setTimeout(()=> {\n            props.onClick();\n          },500)\n        });\n        //console.log(urgent);\n        \n    }\n//----------//\n\n//----- Send Email of New Task -----//\n    const onTaskCreate = (nextTaskNum) => {\n      var thisDueDate = moment(dueDate).format('DD/MM/YYYY');\n      \n      setEmailBody('mailto:?subject=Task:%20'+ nextTaskNum +'&body=' + 'Issue:%20'+ newTaskNo + '%0D%0ADetails:%20'+ newDetails + '%0D%0APriority:%20'+ newTaskPriority + '%0D%0ABy:%20'+ newUser.Username + '%0D%0ADue:%20'+ thisDueDate);\n      \n      const textToCopy = \"Task: \" + nextTaskNum + '\\r\\n' + \"Details: \" + newDetails + '\\r\\n' + \"Priority: \" + newTaskPriority + '\\r\\n' +\"By: \" + newUser.Username + '\\r\\n' + \"Due: \" + thisDueDate; \n      \n      copyToClipboard(textToCopy)\n        .catch(() => console.log('error'));\n      \n      \n      setShowAlert(true);  \n    }\n    const createEmail = () => { \n      //Send email here\n      window.open(emailBody);\n    }\n\n    function copyToClipboard(textToCopy) {\n      // navigator clipboard api needs a secure context (https)\n      if (navigator.clipboard && window.isSecureContext) {\n          // navigator clipboard api method'\n          return navigator.clipboard.writeText(textToCopy);\n      } else {\n          // text area method\n          let textArea = document.createElement(\"textarea\");\n          textArea.value = textToCopy;\n          // make the textarea out of viewport\n          textArea.style.position = \"fixed\";\n          textArea.style.left = \"-999999px\";\n          textArea.style.top = \"-999999px\";\n          document.body.appendChild(textArea);\n          textArea.focus();\n          textArea.select();\n          return new Promise((res, rej) => {\n              // here the magic happens\n              document.execCommand('copy') ? res() : rej();\n              textArea.remove();\n          });\n      }\n  }\n\n  const [inputList, setInputList] = useState([{item: \"\"}]);\n    \n\n    // handle input change\n    const handleInputChange = (e, index) => {\n        const { name, value } = e.target;\n        const list = [...inputList];\n        list[index][name] = value;\n        setInputList(list);\n    };\n\n    // handle click event of the Remove button\n    const handleRemoveClick = index => {\n      const list = [...inputList];\n      list.splice(index, 1);\n      setInputList(list);\n    };\n\n    // handle click event of the Add button\n    const handleAddClick = () => {\n      setInputList([...inputList, { item: \"\"}]);\n    };\n\n\n    return (\n        <>\n        <OverlayTrigger key='NewTask' placement='bottom'\n          overlay={\n            <Tooltip id='tooltip-newtask'>\n              New Task\n            </Tooltip>\n          }\n        >\n        <Button variant=\"secondary\" style={{margin:5}} \n      \tonClick={ () => {\n          handleShowNewTask();  \n          //getNewTaskID().then(task=> setNewTaskNo(task.[0].[\"\"])); \n          setNewContact(Username);  \n        }}\n        className=\"button-to-the-left\"\n        >\n           <RiFileAddLine/>\n        </Button>\n        </OverlayTrigger>\n\n        <Modal show={showNewTask} onHide={handleCloseNewTask} size='lg'>\n        <Modal.Header closeButton>\n          <Modal.Title>Create New Task</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          \n          \n          <Form>\n          <Row>\n            <Col>\n              <Form.Group controlId=\"newTask.CustomerSelect\">\n              <h7>Customer:</h7>\n                <Form.Control size=\"sm\" as=\"select\" value={customers.CustomerName}\n                    onChange = {e=> setNewCustomer(JSON.parse(e.target.value))}>\n                  <option value ={JSON.stringify(currentCustFilter)}>{currentCustFilter.CustomerName}</option>\n                  \n                  <option value={JSON.stringify(HQDetails)}>{HQDetails.CustomerName}</option>\n                  {\n                    customers.map((customer, index) => {\n                      return(<option key={index} value={JSON.stringify(customer)}>{customer.CustomerName}</option>)\n                    })\n                  }\n                </Form.Control>\n              </Form.Group>\n            </Col>\n            <Col>\n              <Form.Group controlId=\"newTask.DepartmentSelect\">\n              <h7>Department:</h7>\n                <Form.Control size=\"sm\" as=\"select\" value={departments.Department}\n                    onChange = {e=> setNewDepartment(JSON.parse(e.target.value))}>\n                  <option value ={JSON.stringify(currentDepFilter)}>{currentDepFilter.Department}</option>\n                  {\n                    departments.map((department, index) => {\n                      if(department.Department!==currentDepFilter.Department){\n                        return(<option key={index} value={JSON.stringify(department)}>{department.Department}</option>)\n                  }\n                     \n                    })\n                  }\n                </Form.Control>\n              </Form.Group>\n            </Col>\n            <Col>\n              <Form.Group controlId=\"newTask.UserSelect\">\n                <h7>For:</h7>\n                <Form.Control size=\"sm\" as=\"select\" value={users.Username}\n                    onChange = {e=> setNewUser(JSON.parse(e.target.value))}>\n                  <option value ={JSON.stringify(currentUserObj)}>{currentUserObj.Username}</option>\n                  {\n                    users.map((user, index) => {\n                    if(user.Username!==currentUserObj.Username) {\n                      return(<option key={index} value={JSON.stringify(user)}>{user.Username}</option>)\n                    }\n                    else return;\n                    })\n                  }\n                </Form.Control>\n              </Form.Group>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <Form.Group className=\"mb-3\" controlId=\"newTask.Details\">\n                <h7>Details:</h7>\n                <Form.Control \n                  as=\"textarea\" \n                  rows={3} \n                  placeholder=\"Add Details...\"\n                  value={newDetails}\n                  onChange = {e=> setNewDetails(e.target.value)}\n                  type=\"text\"\n                  size=\"sm\"\n                />\n              </Form.Group>\n            </Col>\n            <Col>\n              <Form.Group className=\"mb-3\" controlId=\"newTask.Notes\">\n                <h7>Notes:</h7>\n                <Form.Control \n                  as=\"textarea\" \n                  rows={3} \n                  placeholder=\"Add Notes...\"\n                  value={newNotes}\n                  onChange = {e=> setNewNotes(e.target.value)}\n                  type=\"text\"\n                  size=\"sm\"\n                />\n              </Form.Group>\n            </Col>\n          </Row>\n          \n\n          <Form.Group as={Row} className=\"mb-3\" controlId=\"newTask.Dates\" style={{marginTop: 5}}>\n                  <Col xs={2}>\n                    <Form.Label>Due:</Form.Label>\n                  </Col>\n                  <Col >\n                    <DatePicker \n                      selected={dueDate} \n                      onChange={(date) => setDueDate(date)} \n                      dateFormat = 'dd/MM/yyyy' \n                      calendarStartDay={1} \n                      \n                    />\n                  </Col>\n                  <Col xs={2}>\n                    <Form.Label>Requested:</Form.Label>\n                  </Col>\n                  <Col>\n                    <DatePicker \n                      selected={reqDate} \n                      onChange={(date) => setReqDate(date)} \n                      dateFormat = 'dd/MM/yyyy'  \n                      calendarStartDay={1}\n                    />\n                  </Col>\n                  \n          </Form.Group>    \n            \n              <Form.Group as={Row} className=\"mb-3\" controlId=\"newTask.Reference1-2\" style={{marginTop: 5}}>\n              <Col xs={1}>\n                    <Form.Label>P:</Form.Label>\n                  </Col>\n                  <Col xs={3}>\n                    <Form.Check\n                      size=\"sm\"\n                      inline\n                      label=\"1\"\n                      type=\"radio\"\n                      name=\"group1\"\n                      id={'inline-newTask-radio-1'}\n                      onChange = {e=> setNewTaskPriority(1)}\n                    />\n                    <Form.Check\n                      size=\"sm\"\n                      inline\n                      label=\"2\"\n                      type=\"radio\"\n                      name=\"group1\"\n                      id={'inline-newTask-radio-2'}\n                      onChange = {e=> setNewTaskPriority(2)}\n                    />\n                    <Form.Check\n                      size=\"sm\"\n                      inline\n                      label=\"3\"\n                      type=\"radio\"\n                      name=\"group1\"\n                      id={'inline-newTask-radio-3'}\n                      onChange = {e=> setNewTaskPriority(3)}\n                    />\n                  </Col>\n                <Col xs={2}>\n                  <h7>Reference 1:</h7>\n                </Col>\n                <Col>  \n                  <Form.Control \n                    style={{display:'inline'}}\n                    size=\"sm\"\n                    as=\"textarea\" \n                    rows={1}\n                    type=\"text\"\n                    value={newRef1}\n                    onChange = {e=> setNewRef1(e.target.value)}\n                  />\n                </Col>\n                <Col xs={2}>\n              <Form.Label>Reference 2:</Form.Label>\n            </Col>\n            <Col>\n                  <Form.Control \n                    as=\"textarea\" \n                    rows={1}\n                    type=\"text\"\n                    value={newRef2}\n                    onChange = {e=> setNewRef2(e.target.value)}\n                    size=\"sm\"\n                  />\n            </Col>\n              </Form.Group>          \n            \n            <Form.Group as={Row} className=\"mb-3\" controlId=\"newTask.Contact\" style={{marginTop: 5}}>\n                <Col xs={2}>\n                  <Form.Label>Requester:</Form.Label>\n                </Col>\n                <Col>\n                  <Form.Control \n                    as=\"textarea\" \n                    rows={1}\n                    type=\"text\"\n                    value={newContact}\n                    onChange = {e=> setNewContact(e.target.value)}\n                    size=\"sm\"\n                  />\n                </Col>\n                <Col xs={1}>\n                  <Form.Label>Estimate:</Form.Label>\n                </Col>\n                <Col xs={2}>\n                  <Form.Control \n                    as=\"textarea\" \n                    rows={1}\n                    type=\"text\"\n                    value={newEstimate}\n                    onChange = {e=> setNewEstimate(e.target.value)}\n                    size=\"sm\"\n                  />\n                </Col>\n                <Col xs={1}>\n                  <Form.Label>Invoice:</Form.Label>\n                </Col>\n                <Col>\n                  <Form.Control \n                    as=\"textarea\" \n                    rows={1}\n                    type=\"text\"\n                    value={newInvoice}\n                    onChange = {e=> setNewInvoice(e.target.value)}\n                    size=\"sm\"\n                  />\n                </Col>        \n            </Form.Group> \n        </Form>\n\n         <div>\n            <Form.Label>Items:</Form.Label>\n        {inputList.map((x, i) => {\n        return (\n          <div className=\"box\">\n            <Form.Group as={Row} controlId=\"newItems\" style={{marginTop: 5}}>\n                <Col>\n                <Form.Control\n                    size=\"sm\"\n                    as=\"textarea\" \n                    rows={1}\n                    type=\"text\"\n                    name=\"item\"\n                    value={x.item}\n                    onChange={e => handleInputChange(e, i)}\n                />\n                </Col>\n                <Col xs={1}>\n                    {inputList.length !== 1 && \n                      <OverlayTrigger key='RemoveItem' placement='bottom'\n                      overlay={\n                        <Tooltip id='tooltip-removeitem'>\n                          Remove Item\n                        </Tooltip>\n                      }\n                      > \n                        <Button size=\"sm\" className=\"mr10\" variant=\"secondary\" onClick={() => handleRemoveClick(i)}><BiMinus/></Button>\n                      </OverlayTrigger>\n                    }\n                </Col>\n                \n                <Col xs={1}>    \n                    {inputList.length - 1 === i && \n                      <OverlayTrigger key='AddItem' placement='bottom'\n                      overlay={\n                        <Tooltip id='tooltip-additem'>\n                          Add Item\n                        </Tooltip>\n                      }\n                      > \n                      <Button size=\"sm\" variant=\"secondary\" onClick={handleAddClick}><BiPlus/></Button>\n                      </OverlayTrigger>\n                    }\n                </Col>\n            </Form.Group>\n          </div>\n        );\n      })}\n      \n    </div>\n    \n        </Modal.Body>\n        <Modal.Footer>\n\n          <Form.Check \n              type=\"checkbox\" \n              label=\"Make Urgent\"\n              style={{margin:5, right:450 }}\n              onChange = {e=> {\n                if(urgent===null){\n                  setUrgent(1);\n                } else {\n                  setUrgent(null);\n                }\n              }}  \n          />\n          \n          <Button variant=\"secondary\" onClick={handleCloseNewTask}>\n            Close\n          </Button>\n          <Button variant=\"primary\" onClick={()=>{ \n            onSubmitNewTask();\n          }}>\n            Create Task\n          </Button>\n        </Modal.Footer>\n      </Modal>\n\n\n      <Modal\n        size=\"sm\"\n        show={showAlert}\n        onHide={() => setShowAlert(false)}\n        aria-labelledby=\"success-alert\"\n      >\n        <Modal.Header closeButton>\n          <Modal.Title id=\"success-alert-title\">\n            Task {newTaskNo} Created\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          Details copied to clipboard\n          <br/>\n          <Button variant='success' onClick={()=> createEmail()} className=\"button-to-the-right\">\n          <HiOutlineMail/>\n          </Button>\n        </Modal.Body>\n      </Modal>\n\n    </>\n    )\n});\n\n\nexport default NewTask;  ","import React, {useState} from 'react';\nimport moment from 'moment'\n\n\nimport Button from 'react-bootstrap/Button'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger'\nimport Tooltip from 'react-bootstrap/Tooltip'\nimport Modal from 'react-bootstrap/Modal'\nimport Form from 'react-bootstrap/Form'\nimport DatePicker from 'react-datepicker'\n\nimport { editMultiple, makeUrgent } from './returnTasks.js'\nimport {FiEdit} from \"react-icons/fi\"\n\n\n\nconst MultiEdit = React.memo(props => {\n  //Make Multiple Urgent\n  const [urgent, setUrgent] = useState(0);\n\n  //console.log(\"MultiEdit Render\");\n  //console.log(props);\n\n  //----- EDIT MULTIPLE TASKS -----//\n  //Handle Show/Hide modal\n  const [showMultiEdit, setShowMultiEdit] = useState(false);\n  const handleShowMultiEdit = () => {\n    setShowMultiEdit(true);\n    //console.log(selected);\n  }\n\n  const handleCloseMultiEdit = () => {\n    setShowMultiEdit(false);\n  }  \n  //Hold temporary values for update\n  const [tempPriority, setTempPriority] = useState();\n  const [tempDueDate, setTempDueDate] = useState();\n\n  //Function when submitting updates\n  const onSubmitMultiEdit = () => {\n    setShowMultiEdit(false);\n    \n    //Create array with TaskIDs or the selected tasks\n    const selectedIds =[];\n    \n      Object.keys(props.selected).forEach(function(key) {\n        selectedIds.push(key);\n        if(urgent===1){\n          //console.log(props.selected[key]);\n          if(props.selected[key].Urgent===true){\n            //console.log(key + \" is Urgent\");\n            makeUrgent(key, null);\n          } else {\n            //console.log(key + \" is NOT Urgent\");\n            makeUrgent(key, 1);\n          }\n          \n          //makeUrgent(key, urgent);\n        }\n        //console.log(key);\n      });\n    \n    \n\n    //Correctly formatting the data\n    let duedate = \"\";\n    if(tempDueDate){\n      duedate= moment(tempDueDate).format('YYYY-MM-DDThh:mm:ss.000');\n    }\n    \n    //Function to update\n    //console.log(tempPriority);\n    //console.log(duedate);\n    if(tempPriority!==undefined || duedate!==\"\"){\n      editMultiple(selectedIds, tempPriority, duedate);\n      //console.log('Update happened');\n      \n    }\n    \n\n    //Reset temporary values and re-load grid data\n    setTempPriority();\n    setTempDueDate();\n    setUrgent(0);\n\n    setTimeout(()=> {\n      props.onClick();  \n    },500)\n    \n  }\n\n\n    //Allows button to be pressed when some tasks are selected\n    let editIsDisabled = true;\n    if(JSON.stringify(props.selected).length<3) {\n      //console.log(selected);\n      editIsDisabled = true;\n    } else {\n      editIsDisabled = false;\n    }\n    //----------//\n\n  \n\n\n    return(\n        <>\n        \n        <OverlayTrigger key='MultiEdit' placement='bottom'\n          overlay={\n            <Tooltip id='tooltip-multiedit'>\n              Edit Multiple\n            </Tooltip>\n          }\n        >\n          <Button variant=\"secondary\" style={{margin:5} } \n      \tonClick={ () => {\n          handleShowMultiEdit();\n          //props.onClick();\n        }}\n        className=\"button-to-the-left\"\n        disabled={editIsDisabled}\n        >\n        <FiEdit/>\n        </Button>\n        </OverlayTrigger>\n        \n        \n        \n    <Modal show={showMultiEdit} onHide={handleCloseMultiEdit}>\n      <Modal.Header closeButton>\n        <Modal.Title>Update Selected Tasks</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n        <Form.Label>Priority:</Form.Label>\n            <br/>\n            <Form.Check\n              inline\n              label=\"1\"\n              type=\"radio\"\n              name=\"group1\"\n              id={'inline-radio-1'}\n              onChange = {e=> setTempPriority(1)} \n            />\n            <Form.Check\n              inline\n              label=\"2\"\n              type=\"radio\"\n              name=\"group1\"\n              id={'inline-radio-2'}\n              onChange = {e=> setTempPriority(2)}             \n            />\n            <Form.Check\n              inline\n              label=\"3\"\n              type=\"radio\"\n              name=\"group1\"\n              id={'inline-radio-3'}\n              onChange = {e=> setTempPriority(3)} \n            />\n            <br/>\n            <Form.Label>Due Date:&nbsp;&nbsp;&nbsp;</Form.Label>\n            <DatePicker\n              selected={tempDueDate}\n              onChange={(date) => {\n                setTempDueDate(date);\n              }}\n              dateFormat = 'dd/MM/yyyy'\n              calendarStartDay={1}\n            />\n\n            <Form.Check \n              type=\"checkbox\" \n              label=\"Mark/Unmark Urgent\"\n              style={{margin:5 }}\n              onChange = {e=> {\n                  setUrgent(1);\n              }}  \n            />\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={handleCloseMultiEdit}>\n            Cancel\n          </Button>\n          <Button variant=\"primary\" onClick={onSubmitMultiEdit}>\n            Save Changes\n          </Button>\n        </Modal.Footer>\n      </Modal>\n\n      </>\n    )\n});\n\nexport default MultiEdit; ","\nimport React, {useState, useEffect} from 'react';\nimport Button from 'react-bootstrap/Button'\nimport Toast from 'react-bootstrap/Toast'\nimport ReactDataGrid from '@inovua/reactdatagrid-community'\nimport '@inovua/reactdatagrid-community/theme/default-dark.css'\nimport '../custom-grid-styling.css';\n\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger'\nimport Tooltip from 'react-bootstrap/Tooltip'\n\nimport { getSummary } from './returnTasks'\nimport {BsTable} from \"react-icons/bs\"\n\nimport ProgressBar from 'react-bootstrap/ProgressBar'\n\nimport './custom-styling.css';\n\n\nconst Summary = React.memo( props => {\n    //console.log(\"Summary Render\");\n    \n    const [show, setShow] = useState(false);\n    //const [dataSource, setDataSource] = useState([]);\n    const [r1, setR1] = useState();\n    const [r2, setR2] = useState();\n    const [r3, setR3] = useState();\n    const [w1, setW1] = useState();\n    const [w2, setW2] = useState();\n    const [w3, setW3] = useState();\n    const [s1, setS1] = useState();\n    const [s2, setS2] = useState();\n    const [s3, setS3] = useState();\n    const [g1, setG1] = useState();\n    const [g2, setG2] = useState();\n    const [g3, setG3] = useState();\n    const [n1, setN1] = useState();\n    const [n2, setN2] = useState();\n    const [n3, setN3] = useState();\n\n\n    const handleShow = () => {\n        if(show===false){\n            setShow(true);\n        } else {\n            setShow(false);\n        }\n        \n    }\n\n    //GRID SET UP\n    //Default Sorting Info for the grid\n  const defaultSortInfo = { name: 'All', dir: -1 }\n\n    const theme = 'default-dark'\n    const columns = [\n        {name: 'User', header: 'User', maxWidth:100, type: 'string'},\n        {name: 'p1', header: '1', maxWidth:60, type: 'number'},\n        {name: 'p2', header: '2', maxWidth:60, type: 'number'},\n        {name: 'p3', header: '3', maxWidth:60, type: 'number'},\n        {name: 'All', header: 'All', maxWidth:72, type: 'number'}\n    ]\n    const gridStyle = { minHeight:250, margin:5 }\n    \n    const userSource = [\n        {id: 1, User: 'Richard', p1: 0, p2: 0, p3: 0},\n        {id: 2, User: 'Wesley', p1: 0, p2: 0, p3: 0},\n        {id: 5, User: 'Stephen', p1: 0, p2: 0, p3: 0},\n        {id: 6, User: 'Gavin', p1: 0, p2: 0, p3: 0},\n        {id: 7, User: 'Neil', p1: 0, p2: 0, p3: 0}\n    ]\n    \n    \n    const getDataSource = () => {\n        const priorities = [1,2,3];\n        \n        userSource.forEach(user => {   \n            priorities.forEach(p => {\n               getSummary(user.id, p)\n                .then(result => {\n                    //console.log(user.User + \" P:\" + p + \" = \" + result[0].[\"\"]);\n                    if(user.id===1 && p===1){\n                        setR1(result[0].[\"\"]);\n                    }\n                    if(user.id===1 && p===2){\n                        setR2(result[0].[\"\"]);\n                    }\n                    if(user.id===1 && p===3){\n                        setR3(result[0].[\"\"]);\n                    }\n                    if(user.id===2 && p===1){\n                        setW1(result[0].[\"\"]);\n                    }\n                    if(user.id===2 && p===2){\n                        setW2(result[0].[\"\"]);\n                    }\n                    if(user.id===2 && p===3){\n                        setW3(result[0].[\"\"]);\n                    }\n                    if(user.id===5 && p===1){\n                        setS1(result[0].[\"\"]);\n                    }\n                    if(user.id===5 && p===2){\n                        setS2(result[0].[\"\"]);\n                    }\n                    if(user.id===5 && p===3){\n                        setS3(result[0].[\"\"]);\n                    }\n                    if(user.id===6 && p===1){\n                        setG1(result[0].[\"\"]);\n                    }\n                    if(user.id===6 && p===2){\n                        setG2(result[0].[\"\"]);\n                    }\n                    if(user.id===6 && p===3){\n                        setG3(result[0].[\"\"]);\n                    }\n                    if(user.id===7 && p===1){\n                        setN1(result[0].[\"\"]);\n                    }\n                    if(user.id===7 && p===2){\n                        setN2(result[0].[\"\"]);\n                    }\n                    if(user.id===7 && p===3){\n                        setN3(result[0].[\"\"]);\n                    }\n                }) \n            })\n        });        \n    }\n    \n    \n    useEffect(() => {\n       getDataSource();\n    },[])\n    \n\n    const dataSource = [\n        {id: 1, User: 'Richard', p1: r1, p2: r2, p3: r3, All: [r1+r2+r3]},\n        {id: 2, User: 'Wesley', p1: w1, p2: w2, p3: w3, All: [w1+w2+w3]},\n        {id: 5, User: 'Stephen', p1: s1, p2: s2, p3: s3, All: [s1+s2+s3]},\n        {id: 6, User: 'Gavin', p1: g1, p2: g2, p3: g3, All: [g1+g2+g3]},\n        {id: 7, User: 'Neil', p1: n1, p2: n2, p3: n3, All: [n1+n2+n3]}\n    ]\n\n    var numbers = [r1+r2+r3, w1+w2+w3, s1+s2+s3, g1+g2+g3, n1+n2+n3];\n    //console.log(numbers);\n    numbers.sort(function(a, b) {\n      return b - a;\n    });\n    //console.log(numbers);\n\n    return (\n        <>\n        \n        <OverlayTrigger key='Summary' placement='bottom'\n          overlay={\n            <Tooltip id='tooltip-summary'>\n              Show Summary Table\n            </Tooltip>\n          }\n        >\n            <Button style={{margin:5}} onClick={ () => {\n            handleShow();\n            getDataSource();     \n        }}\n          className=\"button-to-the-right\"\n          variant={'secondary'}\n          >\n            <BsTable/>\n          </Button>\n        </OverlayTrigger>\n        \n\n\n        <div className=\"summary\">\n        <Toast onClose={() => setShow(false)} show={show} style={{width:'500px', height: '320px'}} >\n          <Toast.Header>\n            <strong className=\"me-auto\">Summary</strong>\n            \n          </Toast.Header>\n          <Toast.Body>\n          <div className=\"summary-grid\">\n              <ReactDataGrid \n                idProperty=\"id\"\n                columns={columns}\n                dataSource={dataSource}\n                style={gridStyle}\n                theme={theme}\n                defaultSortInfo={defaultSortInfo}\n              />\n            </div>\n              <div className=\"progress-1\">\n              <ProgressBar now={numbers[0]} />\n              </div>\n              <div className=\"progress-2\">\n              <ProgressBar now={numbers[1]} />\n              </div>\n              <div className=\"progress-3\">\n              <ProgressBar now={numbers[2]} />\n              </div>\n              <div className={'progress-4'}>\n              <ProgressBar now={numbers[3]} />\n              </div>\n              <div className=\"progress-5\">\n              <ProgressBar now={numbers[4]} />\n              </div>\n\n              \n          </Toast.Body>\n        </Toast> \n        </div>\n        \n      </>\n    )\n});\n\nexport default Summary;","export function LoadDataSource (user, priority, showingClosed, filterCustCode, department) {\n\n    //-----LOAD TASKS FOR THE GRID -----//\n    //const [dataSource, setDataSource] = useState([]);\n    //const [taskAmount, setTaskAmount] = useState(0);\n\n    let dataSource = []\n    let taskAmount = 0;\n\n    const filterUser = user;\n    const filterPriority = priority;\n    const isShowClosed = showingClosed;\n    const filterCustomer = filterCustCode;\n    const departmentCode = department;\n    \n      const newDataSource = (filterUser, filterPriority, isShowClosed, filterCustomer, departmentCode) =>{\n        return fetch('/queryTasks/' + filterUser + '&' + filterPriority + '&' + isShowClosed + '&' + filterCustomer + '&' + departmentCode).then(response => {\n\n          return response.json().then(data => {\n            taskAmount = data.length;\n            return { data, count: data.length };\n          })\n        });\n      }\n      dataSource = newDataSource(filterUser, filterPriority, isShowClosed, filterCustomer, departmentCode);\n    \n    //----------//\n\n    let returnValues = {\n      data: dataSource,\n      count: taskAmount\n    }\n\n    return returnValues;\n}","import React, {  useState, useEffect, useCallback } from 'react';\n//ReactDataGrid.io used for main grid\nimport ReactDataGrid from '@inovua/reactdatagrid-community'\nimport '@inovua/reactdatagrid-community/base.css'\nimport '@inovua/reactdatagrid-community/index.css'\nimport '@inovua/reactdatagrid-community/theme/default-dark.css'\n\n//Bootstrap Used for buttons, modals and styling\nimport Button from 'react-bootstrap/Button'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport Modal from 'react-bootstrap/Modal'\nimport Form from 'react-bootstrap/Form'\nimport Tabs from 'react-bootstrap/Tabs'\nimport Tab from 'react-bootstrap/Tab'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger'\nimport Tooltip from 'react-bootstrap/Tooltip'\n\n//React-DatePicker used for date inputs\nimport DatePicker from 'react-datepicker'\nimport 'react-datepicker/dist/react-datepicker.css'\nimport moment from 'moment'\n\n// Importing functions to fetch data from express.js server\nimport { addNewTask, openHistory, getNewTaskID, getHistory, addNote, updateTask, returnCustomers, returnDepartments, returnUsers, getSelectedTask, returnReasons, closeTask, reOpenTask, makeUrgent, getItems, closeItem, getTimeSpent } from './returnTasks.js'\n// Function to export grid to excel\nimport { exportCSV, exportPDF } from '../excelExport.js'\n\nimport NewTask from './NewTask.jsx'\nimport MultiEdit from './MultiEdit.jsx'\nimport Summary from './Summary.jsx'\nimport {LoadDataSource} from './LoadDataSource'\n\n\nimport {RiFileExcel2Line} from 'react-icons/ri'\nimport {ImFilePdf} from 'react-icons/im'\nimport {IoReload} from 'react-icons/io5'\nimport {MdCancel} from 'react-icons/md'\nimport {FaBlackTie, FaExclamation, FaSave} from 'react-icons/fa'\nimport {HiOutlineMail} from \"react-icons/hi\";\nimport {AiFillCloseCircle, AiOutlineCopy} from \"react-icons/ai\";\nimport {BiPlus, BiMinus } from \"react-icons/bi\"\n\n\n\n\nfunction addItem(task, details) {\n  const requestOptions = {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({\n      Details: details,\n      taskID: task\n    })\n  }\n  return fetch('/addItem/', requestOptions)\n   \n}\n\n//CSS File for changing row colours\n \n\n//This function adds a className to a row that allows custom styling of that row\nconst rowClassName = ({data})=> {\n  \n  \n  if (data.State === 'C') {\n    return \"global-custom-row-green\"\n  } else if(data.Urgent===true){\n    return \"global-custom-row-red\"\n  }\n  return 'global-custom-row'\n  \n}\n\nconst itemRowClassName = ({data})=> {\n\n  if(data.Complete===true) {\n    return \"global-custom-row-light-green\"\n  }\n\n}\n\n\n\n//Overall Tasks function that handles the 'Tasks' page\nfunction Tasks() {\n  //console.log(\"Tasks Render\");\n\n  //----- GET CURRENT USER -----//\n  const tokenString = sessionStorage.getItem('token');\n  const userToken = JSON.parse(tokenString);\n  //const Username = userToken.username;\n  const UserID = userToken.userId;\n\n  const AllCustomers = {\n    \"SupportCode\":0,\n    \"Customer_Code\":0,\n    \"CustomerName\":\"All Customers\",\n    \"CustomerCode\":0\n  }\n  const AllDepartments = {\n    'Code': 0,\n    'Department': 'All Departments'\n  }\n  const AllUsers = {\n    'Username': 'None Selected',\n    'UserId': 0\n  }\n  const currentUserObj = {\n    'UserId': userToken.userId,\n    'Username':  userToken.username\n  }\n  \n  const [dataSource, setDataSource] = useState([]);\n  const [itemDataSource, setItemDataSource] = useState([]);\n  const [taskAmount, setTaskAmount] = useState();\n  \n  const [filterUser, setFilterUser] = useState(currentUserObj);\n  const [filterPriority, setFilterPriority] = useState(1);\n  const [filterCustomer, setFilterCustomer] = useState(AllCustomers);\n  const [filterDepartment, setFilterDepartment] = useState(AllDepartments);\n  const [showingClosed, setShowingClosed] = useState(false);\n\n\n  //const [allCurrTasks, setAllCurrTasks] = useState({});\n\n  const reLoadDataExt = () => {\n    setDataSource(LoadDataSource(filterUser.UserId, filterPriority, showingClosed, filterCustomer.Customer_Code, filterDepartment.Code).data);\n    setSelected({});\n  }\n  \n  // Use Effect Hook to load data for the grid when webpage is loaded\n  useEffect(() => {\n    let mounted = true;\n    \n    setDataSource(LoadDataSource(filterUser.UserId, filterPriority, showingClosed, filterCustomer.Customer_Code, filterDepartment.Code).data);\n    //console.log(dataSource);\n    returnCustomers()\n      .then(customers => {\n        if(mounted) {\n          setCustomers(customers)\n        }\n      })\n    returnDepartments()\n      .then(departments => {\n        if(mounted) {\n          setDepartments(departments);\n        }\n      })\n    returnUsers()\n      .then(users => { \n        if(mounted) {\n          setUsers(users)\n        }\n      }) \n      if(filterPriority===1) {\n        document.getElementById(\"inline-radio-1\").click();\n      }\n      if(filterPriority===2) {\n        document.getElementById(\"inline-radio-2\").click();\n      }\n      if(filterPriority===3) {\n        document.getElementById(\"inline-radio-3\").click();\n      }\n\n\n      //let gridData=gridRef.current.data;\n      //console.log(gridData);\n      //let allTasks={};\n      //for(let i=0; i<gridData.length; i++) {\n      //  allTasks[gridData[i].Task] = gridData[i]\n      //}\n      //console.log(allTasks);\n      //setAllCurrTasks(allTasks);\n      //console.log(allCurrTasks);\n\n    return () => mounted = false;\n  }, [filterUser, filterPriority, showingClosed, filterCustomer.Customer_Code, filterDepartment.Code])\n  //Store reference to grid for exporting PDF/CSV\n  const [gridRef, setGridRef] = useState(null);\n\n  const [noteValue, setNoteValue] = useState(\"\");\n  const [historyMinutes, setHistoryMinutes] = useState();\n\n  \n  \n\n\n\n  //----- DOUBLE-CLICK ON ROW -----//\n  \n  //setting departments/users/customers for drop downs\n  const [departments, setDepartments] = useState([]);\n  const [customers, setCustomers] = useState([]);\n  const [users, setUsers] = useState([]);\n  //Store current taskID of row that has been double clicked\n  var [taskID, setTaskID] = useState();\n  //Store History of current task\n  const [history, setHistory] = useState([]);\n  //Dates to update\n  const [updateDueDate, setUpdateDueDate] = useState(new Date());\n  const [updateReqDate, setUpdateReqDate] = useState(new Date());\n  //State to load in the task that will be updated\n  const [taskToUpdate, setTaskToUpdate] = useState({});\n  //Holds values of dropdowns to update task with\n  const [editCustomer, setEditCustomer] = useState([]);\n  const [editDepartment, setEditDepartment] = useState([]);\n  const [editUser, setEditUser] = useState([]);\n  const [departmentValue, setDepartmentValue] = useState({});\n  const [tasksUser, setTasksUser] = useState({});\n\n\n  const [closedStatus, setClosedStatus] = useState('O');\n\n\n  //-- SHOW/HIDE MODAL --//\n  const [show, setShow] = useState(false);\n  const [showCloseTask, setShowCloseTask] = useState(false);\n\n  const [emailBody, setEmailBody] = useState(\"\");\n\n  const handleClose = () => {\n    setShow(false);\n    setSelected({}); \n    setHistoryMinutes(); \n    setSelectedItems();\n  }\n  const handleShow = () => {setShow(true);}\n\n  //-- ALLOW DOUBLE CLICK --//\n  const onRowDoubleClick = useCallback((rowProps) => {   \n    \n    var taskID = rowProps.data.Task;\n\n    setItemDataSource(getItems(rowProps.data.Task));\n\n    getSelectedTask(taskID).then(task=> {\n      setTaskToUpdate(task[0]);\n      setUpdateDueDate(new Date(task[0].DueDate));\n      setUpdateReqDate(new Date(task[0].Requested));\n      for(let i=0; i<departments.length; i++) {\n        if(departments[i].Code===task[0].Department) {\n          setDepartmentValue(departments[i]);\n        }\n      }\n      for(let j=0; j<users.length; j++) {\n        if(task[0].ActionBy===users[j].UserId){\n          setTasksUser(users[j]);\n          \n        }\n      }\n      \n      //console.log(itemDataSource);\n\n      setClosedStatus(task[0].State);\n      \n      //console.log(task[0]);\n      let duedate= new Date(task[0].DueDate)\n      let taskDate = moment(duedate).format(\"DD-MM-YYYY\")\n\n      setEmailBody('mailto:?subject=Task:%20'+ task[0].Issue_No +'&body=' + 'Company:%20'+ task[0].Company_Name + '%0D%0AIssue:%20'+ task[0].Issue_No + '%0D%0ADetails:%20'+ task[0].Details + '%0D%0APriority:%20'+ task[0].Priority + '%0D%0ADue:%20'+ taskDate);\n    });\n\n   \n\n    //console.log(departmentValue);\n    \n    handleShow();    \n       \n    setTimeout(() => {\n        document.getElementById('addHistory').focus();\n        /*\n        if(urgentStatus==true) {\n          document.getElementById('mark-urgent-check').click();\n        }\n        */\n    },20)\n        \n    setTaskID(taskID)\n    //var items = getHistory(taskID)\n    //setHistory(items)\n    let minutes = 0;\n    getHistory(taskID)\n      .then(history => {  \n        setHistory(history);        \n      })  \n      \n  }, [departments, taskToUpdate, users]);\n\n  const onRenderRow = useCallback((rowProps) => {\n    const { onDoubleClick } = rowProps;\n    \n    setTaskAmount(rowProps.dataSourceArray.length);\n    \n    \n    rowProps.onDoubleClick = (event) => {\n      onRowDoubleClick(rowProps);\n      if (onDoubleClick) {\n        onDoubleClick(event);\n      }\n    };\n\n\n    \n  }, [onRowDoubleClick])\n  \n  //-- SUBMIT BUTTONS --//\n  const onSubmit = () => {\n    \n    \n    handleClose();\n    //console.log(editUser);\n    //console.log(tasksUser);\n    \n\n    if(editUser.UserId === undefined) {\n      updateTask(taskToUpdate, editCustomer.CustomerName, editCustomer.CustomerCode, editDepartment.Code, tasksUser.UserId);\n      //console.log(tasksUser);\n    } else {\n      updateTask(taskToUpdate, editCustomer.CustomerName, editCustomer.CustomerCode, editDepartment.Code, editUser.UserId);\n      // console.log(editUser);\n\n      //Add Note to History tracking change of User for the Task\n      //  editUser.Username == User task was changed to.\n      //  tasksUser.Username == User it was previously\n\n      let userChanged = \"From \" + tasksUser.Username + \" to \" + editUser.Username; \n      \n      addNote(userChanged, taskID, UserID);\n\n    }\n   \n    \n    if(noteValue !== \"\") {\n      addNote(noteValue, taskID, UserID, historyMinutes);\n      setNoteValue(\"\");\n    }\n    setEditCustomer([]);\n    setEditUser([]);\n    \n    setTimeout(()=> {\n      setDataSource(LoadDataSource(filterUser.UserId, filterPriority, showingClosed, filterCustomer.Customer_Code, filterDepartment.Code).data);\n    },500)\n  \n  \n\n\n    if(selectedItems!==undefined) {\n      const selectedIds =[];\n\n      Object.keys(selectedItems).forEach(function(key) {\n        selectedIds.push(key);\n        //console.log(selectedItems[key].Complete);\n        if(selectedItems[key].Complete===false){\n          closeItem(key, 1);\n          //console.log(key);\n          //console.log(\"is being closed\");\n        } else {\n          closeItem(key, 0);\n          //console.log(key);\n          //console.log(\"is being opened\");\n        }\n      });\n    }\n\n    //console.log(inputList);\n    if(inputList[0].item!==''){\n      //console.log(\"NEW ITEM(S) ADDED\")\n      inputList.forEach(e => {\n        addItem(taskToUpdate.Issue_No, e.item);\n      })\n\n      setInputList([{item: \"\"}]);\n    }\n    \n\n    //closeItem(selectedIds, 1);\n  }\n\n  //States for closing tasks\n  const [reasons, setReasons] = useState([]);\n  const [reasonToClose, setReasonToClose] = useState([]);\n  const [closingMinutes, setClosingMinutes] = useState();\n  \n  const onSubmitCloseTask = () => {\n    handleCloseCloseTask();\n    \n    let closingNote = \"Task Closed: \" + reasonToClose.Reason\n    if(reasonToClose.Code!==undefined){\n      addNote(closingNote, taskID, UserID, closingMinutes);\n      closeTask(taskID, reasonToClose.Code, closingMinutes);\n    } else {\n      alert(\"Please select Reason for Closing Task\");\n      handleShowCloseTask();\n    }\n    \n    setTimeout(()=> {\n      setDataSource(LoadDataSource(filterUser.UserId, filterPriority, showingClosed, filterCustomer.Customer_Code, filterDepartment.Code).data);\n    },500)\n\n    setClosingMinutes();\n  }\n\n  const [timeSpent, setTimeSpent] = useState(0);\n  //Handles Show/Hide Modal for closing tasks\n  const handleCloseCloseTask = () => {\n    setShowCloseTask(false);\n    //alert(reasonToClose.Reason + \" \" + reasonToClose.Code);\n    setClosingMinutes(0);\n    setReasonToClose([]);\n    setTimeSpent(0);\n  }\n  const handleShowCloseTask = () => {\n    getTimeSpent(taskID)\n      .then(res=> {\n        //console.log(res[0].TimeSpent);\n        setTimeSpent(res[0].TimeSpent);\n        setShowCloseTask(true);\n      });    \n    \n    returnReasons()\n      .then(reasons => {\n        setReasons(reasons)\n      })  \n  }\n  //----------//\n\n  //Sets data for the rows that are checked\n  const [selected, setSelected] = useState({});\n  \n  const onSelectionChange = useCallback(({ selected }) => {\n    if(selected!==true){\n      setSelected(selected);\n    }\n\n    //console.log(JSON.stringify(toArray(selected)));\n    //console.log(selected)\n      \n  }, [])\n\n//For Items Grid\n  //Sets data for the rows that are checked\n  const [selectedItems, setSelectedItems] = useState();\n  \n  const onSelectionItemChange = useCallback(({ selected }) => {\n    \n    if(selected!==true){\n      setSelectedItems(selected);\n    }\n\n    //console.log(JSON.stringify(toArray(selected)));\n    //console.log(selectedItems);\n      \n  }, [])\n\n\n  //const [filterUserName, setFilterUserName] = useState(Username);\n  //const [filterPriority, setFilterPriority] = useState(1);\n\n\n  //----- GRID INFO -----//\n  //Default Sorting Info for the grid\n  const defaultSortInfo = { name: 'Task', dir: -1 }\n  //Column set-up for the grid\n  const columns = [\n    {name:'Task', header:'ID', type: 'number', defaultFlex: 1, maxWidth:70},\n    {name:'Customer', header:'Customer', defaultFlex: 1, maxWidth: 200, minWidth: 150},\n    {name:'Details', header:'Details', defaultFlex: 1, minWidth: 500},\n    {name:'Area', header:'Department', defaultFlex: 1, maxWidth: 130},\n    {name:'Application', header:'Ref 1', defaultFlex: 1, maxWidth: 100},\n    {name:'Reference2', header:'Ref 2', defaultFlex: 1, maxWidth: 100},\n    {name:'Last Comment', header:'Last Comment', defaultFlex: 1},\n    {name:'Requested', header:'Requested', defaultFlex: 1, maxWidth: 115, \n      sort: (a, b) => {\n        a = moment(a, 'DD/MM/YYYY', true).format();\n        b = moment(b, 'DD/MM/YYYY', true).format();\n\n        return new Date(a) - new Date(b);\n     }\n    },\n    {name:'Updated', header:'Updated', defaultFlex: 1, maxWidth: 115,\n      sort: (a, b) => {\n        a = moment(a, 'DD/MM/YYYY', true).format();\n        b = moment(b, 'DD/MM/YYYY', true).format();\n\n        return new Date(a) - new Date(b);\n      }\n    },\n    {name:'DueDate', header:'Due Date', defaultFlex: 1, maxWidth: 115,  \n      sort: (a, b) => {\n        a = moment(a, 'DD/MM/YYYY', true).format();\n        b = moment(b, 'DD/MM/YYYY', true).format();\n\n        return new Date(a) - new Date(b);\n      }\n    },\n    {name:'Mins', header:'Estimate', type: 'number', defaultFlex: 1, maxWidth: 120},\n    {name:'P', header:'P', type: 'number', defaultFlex: 1, maxWidth: 75},\n    {name:'ActionByUsername', header:'User', defaultFlex: 1},\n    {name:'Owner_Name', header:'Owner', defaultFlex: 1}\n  ]\n  //Styling that is used on main grid\n  const gridStyle = {\n    height: '100%', \n    marginRight: 10,\n    marginLeft: 10\n    //border: '1px solid black',\n    //boxShadow:  '0 0 8px 2px rgba(0, 0, 0)'\n  }\n\n  const historyStyle = {\n    minHeight: 400\n  }\n  const theme = 'default-dark'\n  //Column set-up for the 'history' grid\n  const itemsColumns = [\n    {name: 'ID', header: 'ID', defaultVisible:false},\n    {name: 'Details', header: 'Details', minWidth:730}\n  ]\n\n  const HQDetails={\n    'SupportCode' : 0,\n    'Customer_Code' : 340,\n    'CustomerName' : \"HQ Software\",\n    'CustomerCode': 340\n  }\n\n  const itemsStyle = {\n    minHeight: 400\n  }\n  const historyColumns = [\n    {name: 'Username', header: 'User'},\n    {name: 'Time', header: 'When'},\n    {name: 'Notes', header: 'Notes', minWidth: 315},\n    {name: 'Minutes', header: 'Minutes'}\n  ]\n\n  const createEmail = () => { \n    //Send email here\n    window.open(emailBody);\n  } \n  \n  const [showPrompt, setShowPrompt] = useState(false);\n  const handleClosePrompt = () => setShowPrompt(false);\n  \n  //Copy the selected Task\n  const copyTask = () => {\n    //console.log(taskToUpdate);\n    \n    handleClosePrompt();\n    \n    getNewTaskID().then(task=> {\n      setTaskID(task.[0].[\"\"])\n    \n      //console.log(task.[0].[\"\"]);\n      addNewTask(task.[0].[\"\"], taskToUpdate.Company_Name, taskToUpdate.Account, taskToUpdate.Details, taskToUpdate.Priority, taskToUpdate.DueDate, taskToUpdate.Requested, taskToUpdate.Department, taskToUpdate.Owner_Name, taskToUpdate.ActionBy, taskToUpdate.Reference, taskToUpdate.Reference3, taskToUpdate.Reference2, taskToUpdate.Notes, taskToUpdate.Reference4, taskToUpdate.Invoice, taskToUpdate.Urgent);\n      openHistory(task.[0].[\"\"], UserID);\n      //onTaskCreate(task.[0].[\"\"]);\n      setTaskToUpdate(prevTask => {\n        return { \n          ...prevTask, \n          Issue_No: task[0].[\"\"]\n        }\n      })\n      let minutes = 0;\n      getHistory(task.[0].[\"\"])\n        .then(history => {  \n          setHistory(history);\n          //console.log(history);\n          history.forEach(item => {\n            minutes=minutes+item.Minutes\n          }); \n          setShow(true);\n      }) \n\n      \n      //Reload task data\n      setTimeout(()=> {\n        reLoadDataExt();\n        //setShow(true);\n      },300)\n    });\n\n  }\n\n  //Adding new Items to task\n\n  const [inputList, setInputList] = useState([{item: \"\"}]);\n    \n\n    // handle input change\n    const handleInputChange = (e, index) => {\n        const { name, value } = e.target;\n        const list = [...inputList];\n        list[index][name] = value;\n        setInputList(list);\n    };\n\n    // handle click event of the Remove button\n    const handleRemoveClick = index => {\n      const list = [...inputList];\n      list.splice(index, 1);\n      setInputList(list);\n    };\n\n    // handle click event of the Add button\n    const handleAddClick = () => {\n      setInputList([...inputList, { item: \"\"}]);\n    };\n\n  \n  return(\n    <div className='main-div'>\n\n      <h5 className='task-amount-heading'>Total: {taskAmount}</h5>\n      \n      <OverlayTrigger key='CSVEXPORT' placement='bottom'\n              overlay={\n                <Tooltip id='tooltip-excel'>\n                  Export to Excel\n                </Tooltip>\n              }\n            >\n        <Button variant=\"secondary\" style={{margin:5}} \n        \tonClick={ () => {\n            const gridData = gridRef;\n            exportCSV(gridData);\n          }}\n          className=\"button-to-the-right\"\n        >\n        <RiFileExcel2Line />\n        </Button>\n      </OverlayTrigger>\n      <OverlayTrigger key='PDFEXPORT' placement='bottom'\n        overlay={\n          <Tooltip id='tooltip-pdf'>\n            Export to PDF\n          </Tooltip>\n        } \n      >\n           <Button variant=\"secondary\" style={{margin:5}} \n        \tonClick={ () => {\n            const gridData = gridRef;\n            exportPDF(gridData, filterCustomer);\n          }}\n          className=\"button-to-the-right\"\n        >\n          <ImFilePdf />\n        </Button>    \n      </OverlayTrigger>\n      \n      <Summary />\n        \n      \n      <Row xs=\"auto\">\n        <Col>\n        \n        \n        <NewTask filterUser={filterUser}  filterDepartment={filterDepartment} filterCustomer={filterCustomer} onClick={reLoadDataExt}/>\n      \n        <MultiEdit selected={selected} onClick={reLoadDataExt}/>  \n\n        \n\n        <OverlayTrigger key='ClearFilters' placement='bottom'\n        overlay={\n          <Tooltip id='tooltip-clear'>\n            Clear Filters\n          </Tooltip>\n        }\n      >\n           <Button variant=\"secondary\" style={{margin:5}} \n        \tonClick={ () => {\n            setFilterCustomer(AllCustomers);\n            setFilterUser(AllUsers);\n            //setFilterUserName(Username);\n            setFilterDepartment(AllDepartments);\n            document.getElementById('inline-radio-4-all').click();\n          }}\n        >\n          <MdCancel />\n        </Button>    \n      </OverlayTrigger>\n      <OverlayTrigger key='Refresh' placement='bottom'\n              overlay={\n                <Tooltip id='tooltip-refresh'>\n                  Refresh\n                </Tooltip>\n              }\n            >\n              <Button variant=\"secondary\" style={{margin:5}}\n              onClick={() => {\n                setDataSource(LoadDataSource(filterUser.UserId, filterPriority, showingClosed, filterCustomer.Customer_Code, filterDepartment.Code).data);\n                //console.log(dataSource)\n              }}>\n                <IoReload/>\n              </Button>\n            </OverlayTrigger>\n\n        </Col>\n           \n        <Col>\n             <Form.Group controlId=\"FILTER.CUSTSelect\">\n              <Form.Control as=\"select\" value={JSON.stringify(filterCustomer)} style={{display:'inline', margin:5, width:200}}\n                onChange = {e=> {\n                  setFilterCustomer(JSON.parse(e.target.value));\n                  // console.log(e.target.value);\n                }}>\n              <option value={JSON.stringify(AllCustomers)}>{AllCustomers.CustomerName}</option>\n              <option value={JSON.stringify(HQDetails)}>{HQDetails.CustomerName}</option>\n              {\n                customers.map((customer, index) => {\n                  return(<option key={index} value={JSON.stringify(customer)}>{customer.CustomerName}</option>)\n                })\n              }\n              </Form.Control>\n            </Form.Group>\n            </Col>\n            <Col>\n            <Form.Control as=\"select\" value={JSON.stringify(filterUser)} style={{ margin:5, width:100}}\n                onChange = {e=> {\n                  //let temp=JSON.parse(e.target.value);\n                  //setFilterUserName(temp.Username);\n                  setFilterUser(JSON.parse(e.target.value));\n                }}>\n              <option value ={JSON.stringify(currentUserObj)}>{currentUserObj.Username}</option>\n              {\n                users.map((user, index) => {\n                  if(user.Username!==currentUserObj.Username) {\n                    return(<option key={index} value={JSON.stringify(user)}>{user.Username}</option>)\n                  }\n                  else return;\n                })\n              }\n              <option value={JSON.stringify(AllUsers)}>All Users</option>\n            </Form.Control>\n            </Col>\n            <Col>\n              <Form.Group controlId=\"Filter.DepartmentSelect\">\n                <Form.Control as=\"select\" value={JSON.stringify(filterDepartment)} style={{ margin:5, width:170}}\n                    onChange = {e=> setFilterDepartment(JSON.parse(e.target.value))}>\n                  <option value={JSON.stringify(AllDepartments)}>{AllDepartments.Department}</option>\n                  {\n                    departments.map((department, index) => {\n                      return(<option key={index} value={JSON.stringify(department)}>{department.Department}</option>)\n                    })\n                  }\n                </Form.Control>\n              </Form.Group>\n            </Col>\n            <Col>\n            <Form.Group style={{margin:5, 'margin-top':15}}>\n            <Form.Check\n              inline\n              label=\"1\"\n              type=\"radio\"\n              name=\"group1\"\n              id={'inline-radio-1'}\n              onChange = {e=> setFilterPriority(1)} \n            />\n            <Form.Check\n              inline\n              label=\"2\"\n              type=\"radio\"\n              name=\"group1\"\n              id={'inline-radio-2'}\n              onChange = {e=> setFilterPriority(2)}             \n            />\n            <Form.Check\n              inline\n              label=\"3\"\n              type=\"radio\"\n              name=\"group1\"\n              id={'inline-radio-3'}\n              onChange = {e=> setFilterPriority(3)} \n            />\n            <Form.Check\n              inline\n              label=\"ALL\"\n              type=\"radio\"\n              name=\"group1\"\n              id={'inline-radio-4-all'}\n              onChange = {e=> setFilterPriority(0)} \n            />\n            </Form.Group>\n            </Col>\n            <Col>\n            <Form.Check \n              type=\"checkbox\" \n              label=\"Show Closed Items\"\n              style={{margin:5, 'margin-top':15}}\n              onChange = {e=> {\n                if (showingClosed===false) {\n                  setShowingClosed(true);\n                } else {\n                  setShowingClosed(false);\n                }\n              }}  \n            />\n            </Col>\n            \n            \n            </Row>\n           \n            \n            \n            \n            \n          \n              <div className='grid-div'>\n\n      <ReactDataGrid\n        \n        rowClassName={rowClassName}\n        handle={setGridRef}\n        idProperty=\"Task\"\n        columns={columns}\n        dataSource={dataSource}\n        style={gridStyle}\n        theme={theme}\n        onRenderRow={onRenderRow}\n        selected={selected}\n        checkboxColumn\n        onSelectionChange={onSelectionChange}\n        defaultSortInfo={defaultSortInfo}\n        \n        />\n        </div>\n\n      \n      <Modal show={show} onHide={handleClose} size=\"lg\" backdrop=\"static\">\n        <Modal.Header closeButton>\n          <Modal.Title>Task: {taskID}</Modal.Title> \n          \n          <OverlayTrigger key='Make-Urgent' placement='bottom'\n        overlay={\n          <Tooltip id='tooltip-pdf'>\n            Mark/Unmark as Urgent\n          </Tooltip>\n        }\n      >\n        <Button variant =\"danger\" style={{Margin:10 , position:'absolute', left: 160}} \n          onClick={() => {\n            let input=null;\n              if(taskToUpdate.Urgent===null) {\n                input = 1;\n              } else {\n                input = null;\n              }\n            makeUrgent(taskID, input);\n            handleClose();\n            onSubmit();\n          }}\n          >\n            <FaExclamation/>\n          </Button>\n        </OverlayTrigger>\n        {\n          closedStatus==='C' &&\n          <Button variant =\"danger\" style={{Margin:10, position: 'absolute', left:210}}\n          onClick={() => {\n            handleClose();\n            reOpenTask(taskID);\n            setTimeout(() => {\n              setDataSource(LoadDataSource(filterUser.UserId, filterPriority, showingClosed, filterCustomer.Customer_Code, filterDepartment.Code).data);\n            }, 50)\n            \n          }}\n          >Reopen Task</Button>\n        }\n        {\n          closedStatus==='O' &&\n          <OverlayTrigger key='close-task' placement='bottom'\n            overlay={\n              <Tooltip id='tooltip-close'>\n                Close this Task\n              </Tooltip>\n            }\n          >\n            <Button variant=\"danger\" style={{Margin: 10, position: 'absolute', left:210}}\n            onClick={ () => {\n              handleClose(); \n              handleShowCloseTask();\n              onSubmit();\n              \n            }}\n            >\n              <AiFillCloseCircle/>\n            </Button>\n          </OverlayTrigger>\n          \n        }        \n        <OverlayTrigger key='save-task' placement='bottom'\n            overlay={\n              <Tooltip id='tooltip-save'>\n                Save Changes\n              </Tooltip>\n            }\n        >\n          <Button variant=\"secondary\" onClick={handleClose && onSubmit} style={{position: 'absolute', right:50}}>\n            <FaSave />\n          </Button>\n        </OverlayTrigger>\n\n          <OverlayTrigger key='send-email' placement='bottom'\n            overlay={\n              <Tooltip id='tooltip-email'>\n                Email Task\n              </Tooltip>\n            }\n          >\n            <Button variant='secondary' style={{position: 'absolute', right:100}} onClick={()=> createEmail()}>\n              <HiOutlineMail/>\n            </Button>\n        </OverlayTrigger>\n\n        <OverlayTrigger key='copy-task' placement='bottom'\n            overlay={\n              <Tooltip id='tooltip-save'>\n                Copy Task\n              </Tooltip>\n            }\n        >\n          <Button variant=\"secondary\" onClick={()=> {\n            setShowPrompt(true); \n            setShow(false);\n          }} style={{position: 'absolute', right:150}}>\n            <AiOutlineCopy />\n          </Button>\n        </OverlayTrigger>\n          \n        </Modal.Header>\n        <Modal.Body>\n        <Tabs className=\"mb-3\" onSelect={(k) => { \n          if(k===\"editTask\"){\n            document.getElementById(`inline-editradio-${taskToUpdate.Priority}`).click();\n          }\n        }}>\n            <Tab eventKey=\"history\" title=\"History\">\n              <Form>\n                \n                <Form.Group className=\"mb-3\" controlId=\"addHistory\">\n                  <Form.Label>Add History:</Form.Label>\n                  <Form.Control \n                    as=\"textarea\" \n                    rows={3} \n                    placeholder=\"Add History...\"\n                    value={noteValue}\n                    onChange = {e=> setNoteValue(e.target.value)}\n                    type=\"text\"\n                  />\n                </Form.Group>\n\n                \n                <Form.Group className=\"mb-3\" controlId=\"closeTask.Minutes\">\n                <Form.Label>Add Time Spent:</Form.Label>\n                <Form.Control \n                  as=\"textarea\" \n                  rows={1}\n                  \n                  placeholder=\"Minutes...\"\n                  value={historyMinutes}\n                  onChange = {e=> setHistoryMinutes(e.target.value)}/>\n            </Form.Group>\n              </Form>\n          \n              <ReactDataGrid \n                columns={historyColumns}\n                dataSource={history}\n                editable={true}\n                style={historyStyle}\n              />\n            </Tab>\n            <Tab eventKey=\"editTask\" title=\"Edit\">\n            <Form>\n              <Row>\n                <Col>\n                  <Form.Group controlId=\"editTask.CustomerSelect\">\n                  <h7>Customer:</h7>\n                    <Form.Control size='sm' as=\"select\" value={customers.CustomerName}\n                      onChange = {e=> {\n                        setEditCustomer(JSON.parse(e.target.value));\n                      }}\n                    >\n                      <option>{taskToUpdate.Company_Name}</option>\n                      <option value={JSON.stringify(HQDetails)}>{HQDetails.CustomerName}</option>\n                      {\n                        customers.map((customer, index) => {\n                        return(<option key={index} value={JSON.stringify(customer)}>{customer.CustomerName}</option>)\n                        })\n                      }\n                    </Form.Control>\n                  </Form.Group>\n                </Col>\n                <Col>\n                  <Form.Group controlId=\"editTask.Department\">\n                  <Form.Label style={{display:'inline'}}>Department:</Form.Label>\n                    <Form.Control size='sm' as=\"select\" value={departments.Department}\n                      onChange = {e=> {\n                        setEditDepartment(JSON.parse(e.target.value))\n                        console.log(JSON.parse(e.target.value))  \n                      }}\n                    >\n                      <option value={JSON.stringify(departmentValue)}>{departmentValue.Department}</option>\n                      {\n                        departments.map((department, index) => {\n                        if(departmentValue.Department!==department.Department){\n                          return(<option key={index} value={JSON.stringify(department)}>{department.Department}</option>)\n                        }\n                        else return\n                        })\n                      }\n                    </Form.Control>\n                  </Form.Group>\n                </Col>\n                <Col>\n                  <Form.Group controlId=\"editTask.UserSelect\">\n                    <Form.Label style={{display:'inline'}}>For:</Form.Label>\n                    <Form.Control size='sm' as=\"select\" value={users.UserName}\n                      onChange = {e=> {setEditUser(JSON.parse(e.target.value))\n                      //console.log(JSON.parse(e.target.value));\n                      }}\n                    >\n                      <option value={tasksUser}>{tasksUser.Username}</option>\n                      {\n                        users.map((user, index) => {\n                        if(tasksUser.Username!==user.Username){\n                          return(<option key={index} value={JSON.stringify(user)}>{user.Username}</option>)\n                        }\n                        else return\n                        })\n                      }\n                    </Form.Control>\n                  </Form.Group>\n                </Col>\n              </Row>\n              <Row>\n                <Col>\n                  <Form.Group className=\"mb-3\" controlId=\"editTask.Details\">\n                    <Form.Label>Details:</Form.Label>\n                    <Form.Control \n                      as=\"textarea\" \n                      rows={3} \n                      placeholder=\"Details...\"\n                      value={taskToUpdate.Details}\n                      onChange = {e=> setTaskToUpdate(prevTask => {\n                        return { \n                          ...prevTask, \n                          Details: e.target.value\n                        }\n                      })}\n                      type=\"text\"\n                    />\n                  </Form.Group>\n                </Col>\n                <Col>\n                  <Form.Group className=\"mb-3\" controlId=\"editTask.Notes\">\n                    <Form.Label>Notes:</Form.Label>\n                    <Form.Control \n                      as=\"textarea\" \n                      rows={3} \n                      placeholder=\"Notes...\"\n                      value={taskToUpdate.Notes}\n                      onChange = {e=> setTaskToUpdate(prevTask => {\n                        return { \n                          ...prevTask, \n                          Notes: e.target.value\n                        }\n                      })}\n                      type=\"text\"\n                    />\n                  </Form.Group>\n                </Col>\n              </Row>\n              <Row>\n                <Col>\n                  <Form.Label>Due Date:&nbsp;&nbsp;&nbsp;</Form.Label>\n                  <DatePicker \n                    selected={updateDueDate} \n                    onChange={(date) => setTaskToUpdate(prevTask => {\n                      setUpdateDueDate(new Date(date))\n\n                      return {\n                        ...prevTask,\n                        DueDate: moment(date).format('YYYY-MM-DDThh:mm:ss.000')\n                      }\n                    \n                    })} \n                    dateFormat = 'dd/MM/yyyy'\n                    calendarStartDay={1}\n                  />\n                </Col>\n                <Col>\n                  <Form.Label>Requested Date:&nbsp;&nbsp;&nbsp;</Form.Label>\n                  <DatePicker \n                    selected={updateReqDate} \n                    onChange={(date) => setTaskToUpdate(prevTask => {\n                      setUpdateReqDate(date)\n\n                      return {\n                        ...prevTask,\n                        Requested: moment(date).format('YYYY-MM-DDThh:mm:ss.000')\n                      }\n                    }\n                    )}  \n                    dateFormat = 'dd/MM/yyyy'  \n                    calendarStartDay={1}\n                  />\n                </Col>\n                <Col>\n                  <Form.Label>Priority:&nbsp;&nbsp;</Form.Label>\n                    <br/>\n                  <Form.Check\n                    inline\n                    label=\"1\"\n                    type=\"radio\"\n                    name=\"group1\"\n                    id={'inline-editradio-1'}\n                    onChange = {e=> setTaskToUpdate(prevTask => {\n                      return { \n                        ...prevTask, \n                        Priority: 1\n                      }\n                    })} \n                  />\n                  <Form.Check\n                    inline\n                    label=\"2\"\n                    type=\"radio\"\n                    name=\"group1\"\n                    id={'inline-editradio-2'}\n                    onChange = {e=> setTaskToUpdate(prevTask => {\n                      return { \n                        ...prevTask, \n                        Priority: 2\n                      }\n                    })}             \n                  />\n                  <Form.Check\n                    inline\n                    label=\"3\"\n                    type=\"radio\"\n                    name=\"group1\"\n                    id={'inline-editradio-3'}\n                    onChange = {e=> setTaskToUpdate(prevTask => {\n                      return { \n                        ...prevTask, \n                        Priority: 3\n                      }\n                    })} \n                  />\n                </Col>\n              </Row>\n              <Row>\n                <Col>\n                  <Form.Group className=\"mb-3\" controlId=\"editTask.Section\" style={{marginTop: 15}}>\n                    <Form.Label>Reference 1:</Form.Label>\n                      <Form.Control \n                        as=\"textarea\" \n                        rows={1}\n                        type=\"text\"\n                        value={taskToUpdate.Reference}\n                        onChange = {e=> setTaskToUpdate(prevTask => {\n                          return { \n                            ...prevTask, \n                            Reference: e.target.value\n                          }\n                        })}                \n                      />\n                  </Form.Group>\n                </Col>\n                <Col>\n                  <Form.Group className=\"mb-3\" controlId=\"newTask.Area\" style={{marginTop: 15}}>\n                    <Form.Label>Reference 2:</Form.Label>\n                      <Form.Control \n                        as=\"textarea\" \n                        rows={1}\n                        type=\"text\"\n                        value={taskToUpdate.Reference2}\n                        onChange = {e=> setTaskToUpdate(prevTask => {\n                          return { \n                            ...prevTask, \n                            Reference2: e.target.value\n                          }\n                        })} \n                      />\n                  </Form.Group>\n                </Col>\n                \n              </Row>\n              <Row>\n                <Col>\n                  <Form.Group className=\"mb-3\" controlId=\"editTask.Contact\">\n                  <Form.Label>Requester:</Form.Label>\n                    <Form.Control \n                      as=\"textarea\" \n                      rows={1}\n                      type=\"text\"\n                      value={taskToUpdate.Reference3}\n                      onChange = {e=> setTaskToUpdate(prevTask => {\n                        return { \n                          ...prevTask, \n                          Reference3: e.target.value\n                        }\n                      })}                \n                    />\n                  </Form.Group> \n                </Col>\n                <Col>\n                  \t<Form.Group className=\"mb-3\" controlId=\"newTask.Estimate\">\n                    <Form.Label>Estimate:</Form.Label>\n                      <Form.Control \n                        as=\"textarea\" \n                        rows={1}\n                        type=\"text\"\n                        value={taskToUpdate.Reference4}\n                        onChange = {e=> setTaskToUpdate(prevTask => {\n                          return { \n                            ...prevTask, \n                            Reference4: e.target.value\n                          }\n                        })}                \n                      />\n                    </Form.Group> \n                </Col>\n                <Col>\n                  <Form.Group className=\"mb-3\" controlId=\"newTask.Invoice\">\n                  <Form.Label>Invoice:</Form.Label>\n                    <Form.Control \n                      as=\"textarea\" \n                      rows={1}\n                      type=\"text\"\n                      value={taskToUpdate.Invoice}\n                      onChange = {e=> setTaskToUpdate(prevTask => {\n                        return { \n                          ...prevTask, \n                          Invoice: e.target.value\n                        }\n                      })}                \n                    />\n                  </Form.Group> \n                </Col>\n              </Row>   \n          </Form> \n          <Form.Label>Items:</Form.Label>\n        {inputList.map((x, i) => {\n        return (\n          <div className=\"box\">\n            <Form.Group as={Row} controlId=\"newItems\" style={{marginTop: 5}}>\n                <Col>\n                <Form.Control\n                    size=\"sm\"\n                    as=\"textarea\" \n                    rows={1}\n                    type=\"text\"\n                    name=\"item\"\n                    value={x.item}\n                    onChange={e => handleInputChange(e, i)}\n                />\n                </Col>\n                <Col xs={1}>\n                    {inputList.length !== 1 && \n                      <OverlayTrigger key='RemoveItem' placement='bottom'\n                      overlay={\n                        <Tooltip id='tooltip-removeitem'>\n                          Remove Item\n                        </Tooltip>\n                      }\n                      > \n                        <Button size=\"sm\" className=\"mr10\" variant=\"secondary\" onClick={() => handleRemoveClick(i)}><BiMinus/></Button>\n                      </OverlayTrigger>\n                    }\n                </Col>\n                \n                <Col xs={1}>    \n                    {inputList.length - 1 === i && \n                      <OverlayTrigger key='AddItem' placement='bottom'\n                      overlay={\n                        <Tooltip id='tooltip-additem'>\n                          Add Item\n                        </Tooltip>\n                      }\n                      > \n                      <Button size=\"sm\" variant=\"secondary\" onClick={handleAddClick}><BiPlus/></Button>\n                      </OverlayTrigger>\n                    }\n                </Col>\n            </Form.Group>\n          </div>\n        );\n      })}        \n          \n\n         </Tab>\n         \n         <Tab eventKey=\"items\" title=\"Items\">\n         <ReactDataGrid \n                idProperty=\"ID\"\n                selected={selectedItems}\n                checkboxColumn\n                onSelectionChange={onSelectionItemChange}\n                columns={itemsColumns}\n                dataSource={itemDataSource}\n                style={itemsStyle}   \n                rowClassName={itemRowClassName}\n                editable={true}             \n          />\n\n\n              \n         </Tab>\n        </Tabs>\n          \n        </Modal.Body>\n      </Modal>\n\n      <Modal show={showCloseTask} onHide={handleCloseCloseTask}>\n        <Modal.Header closeButton>\n          <Modal.Title>Close Task: {taskID}</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n        <Form.Group controlId=\"closeTask.ReasonSelect\">  \n            <Form.Control as=\"select\" value={reasons.Reason}\n                onChange = {e=> setReasonToClose(JSON.parse(e.target.value))}>\n                <option value={{}}>Select Close Reason . . .</option>\n              {\n                reasons.map((reason, index) => {\n                  return(<option key={index} value={JSON.stringify(reason)}>{reason.Reason}</option>)\n                })\n              }\n            </Form.Control>\n            </Form.Group>\n            <Form.Label>Time Spent: {timeSpent}</Form.Label>\n            <Form.Group className=\"mb-3\" controlId=\"closeTask.Minutes\">\n              <Form.Label>Additional Minutes:</Form.Label>\n                <Form.Control \n                  as=\"textarea\" \n                  rows={1}\n                  type=\"text\"\n                  value={closingMinutes}\n                  placeholder=\"Additional Minutes...\"\n                  onChange = {e=> setClosingMinutes(e.target.value)}                />\n            </Form.Group>\n        </Modal.Body>\n        <Modal.Footer>\n          \n          <Button variant=\"secondary\" onClick={handleCloseCloseTask}>\n            Cancel\n          </Button>\n          \n          <Button variant=\"danger\" onClick={handleCloseCloseTask && onSubmitCloseTask}>\n            Close Task\n          </Button>\n        </Modal.Footer>\n      </Modal>\n\n\n      <Modal show={showPrompt} onHide={handleClosePrompt}>\n        <Modal.Header closeButton>\n          <Modal.Title>Copying task {taskID}</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>Are you sure you want to copy Task: {taskID} ?</Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={handleClosePrompt}>\n            Cancel\n          </Button>\n          <Button variant=\"primary\" onClick={handleClosePrompt && copyTask}>\n            Yes\n          </Button>\n        </Modal.Footer>\n      </Modal>\n\n     \n\n      \n    </div>       \n    \n  )\n}\n\n\n\nexport default Tasks;  ","import React, {  useState, useEffect} from 'react';\n\n//ReactDataGrid.io used for main grid\nimport ReactDataGrid from '@inovua/reactdatagrid-community'\nimport '@inovua/reactdatagrid-community/base.css'\nimport '@inovua/reactdatagrid-community/index.css'\nimport '@inovua/reactdatagrid-community/theme/default-dark.css'\n\n\nasync function returnSupportSummary(customer) {\n    const response = await fetch('/returnSupportSummary/' + customer);\n    const customers = await response.json();\n    return customers\n}\n\nfunction SupportSummary(customer) {\n\n    const [dataSource, setDataSource] = useState([]);\n\n    const columns = [\n        {name:'Username', header:'User', type: 'strin', defaultFlex: 1, maxWidth: 80},\n        {name:'Datetime', header:'When',  defaultFlex: 1, maxWidth: 100},\n        {name:'Details', header:'Details', defaultFlex: 1, editable:true}\n    ]\n\n    const gridStyle = {\n        minHeight: 441, \n        marginRight: 10,\n        marginLeft: 10\n    }\n\n    const theme = 'default-dark'\n\n    useEffect(() => {\n        let mounted = true;\n    \n        //console.log(customer.customer);\n    \n        returnSupportSummary(customer.customer)\n            .then(summary => {\n              if(mounted) {\n                setDataSource(summary);\n              }\n            })\n        //console.log(dataSource);\n        return () => mounted = false;\n    },[customer])\n    return(\n        <>\n        <ReactDataGrid\n        \n        //rowClassName={rowClassName}\n        //handle={setGridRef}\n        //idProperty=\"Task\"\n        columns={columns}\n        dataSource={dataSource}\n        style={gridStyle}\n        theme={theme}\n        //onRenderRow={onRenderRow}\n        //selected={selected}\n        //checkboxColumn\n        //onSelectionChange={onSelectionChange}\n        //defaultSortInfo={defaultSortInfo}\n                \n      />\n      </>\n    )\n}\n\nexport default SupportSummary;","import  React, {useEffect, useState, useRef}  from \"react\";\n\n//Bootstrap Used for buttons, modals and styling\nimport Button from 'react-bootstrap/Button'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport Form from 'react-bootstrap/Form'\n//import Row from 'react-bootstrap/Row'\n//import Col from 'react-bootstrap/Col'\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger'\nimport Tooltip from 'react-bootstrap/Tooltip'\n\n//React-DatePicker used for date inputs\nimport DatePicker from 'react-datepicker'\nimport 'react-datepicker/dist/react-datepicker.css'\nimport moment from 'moment'\n\nimport { FaSave } from 'react-icons/fa'\n\nimport SupportSummary from './SupportSummary.jsx'\n\n\nasync function returnCustomers() {\n    const response = await fetch('/returnCustomers');\n    const customers = await response.json();\n    return customers\n}\nasync function returnReasons() {\n    const response = await fetch('/returnSupportReasons');\n    const reasons = await response.json();\n    return reasons\n}\n\nfunction addQuickSupport(support, details, formatDate, minutes, phone, email, remote, siteVisit, outOfHours, Reason, UserID) {\n    const requestOptions = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        SupportCode: support,\n        User: UserID,\n        Date: formatDate,\n        Details: details,\n        Phone: phone,\n        Email: email,\n        Site: siteVisit,\n        Minutes: minutes,\n        Remote: remote,\n        Reason: Reason,\n        OutOfHours: outOfHours\n      })\n    }\n    return fetch('/addQuickSupport/', requestOptions)\n     \n  }\n\nfunction QuickSupport() {\n    //----- GET CURRENT USER -----//\n    const tokenString = sessionStorage.getItem('token');\n    const userToken = JSON.parse(tokenString);\n    //const Username = userToken.username;\n    const UserID = userToken.userId;\n\n    const AllCustomers = {\n        \"SupportCode\":0,\n        \"Customer_Code\":0,\n        \"CustomerName\":\"Select Customer\",\n        \"CustomerCode\":0\n    }\n    \n    const AllReasons = {Code: 0, Reason: 'Select Reason'}\n    \n    const [customer, setCustomer] = useState(AllCustomers);\n    const [customers, setCustomers] = useState([]);\n    const [details, setDetails] = useState(\"\");\n    const [date, setDate] = useState(new Date());\n    const [reasons, setReasons] = useState([]);\n    const [selectedReason, setSelectedReason] = useState(AllReasons);\n    const [minutes, setMinutes] = useState(0);\n    const [showOther, setShowOther] = useState(false);\n    const [phone, setPhone] = useState('N');\n    const [email, setEmail] = useState('N');\n    const [remote, setRemote] = useState('N');\n    const [siteVisit, setSiteVisit] = useState('N');\n    const [outOfHours, setOutOfHours] = useState('N');\n\n    const [validated, setValidated] = useState(false);\n    const formRef = useRef(null);\n\n    useEffect(() => {\n\n        let mounted = true;\n\n        returnCustomers()\n            .then(customers => {\n                if(mounted) {\n                setCustomers(customers)\n                }\n            })\n        returnReasons()\n            .then(reasons => {\n              if(mounted) {\n                setReasons(reasons)\n              }  \n            })\n\n        return () => mounted = false;\n\n    },[])\n\n    \n    const onSubmit = () => {\n        //Set Date to correct format\n        var formatDate = moment(date).format('YYYY-MM-DD hh:mm:ss');\n\n        if(customer.CustomerName===\"Select Customer\"){\n            alert(\"Please Select a Customer\");\n        } else if(details==\"\") {\n            alert(\"Please add some Details\");\n        } else if(selectedReason.Code===0) {\n            alert(\"Please Select a Reason\");\n        } else {\n            \n            addQuickSupport(customer.SupportCode, details, formatDate, minutes, phone, email, remote, siteVisit, outOfHours, selectedReason.Code, UserID);\n            handleReset();\n        }\n        \n        \n\n        \n    }\n\n    const handleReset = () => {\n        formRef.current.reset();\n        setValidated(false);\n\n        setDetails(\"\");\n        setDate(new Date());\n        setSelectedReason(AllReasons);\n        setMinutes();\n        setPhone('N');\n        setEmail('N');\n        setRemote('N');\n        setSiteVisit('N');\n        setOutOfHours('N');\n\n\n        let currentCustomer = customer;\n        setCustomer(AllCustomers);\n        setTimeout(()=>{\n            setCustomer(currentCustomer);\n        }, 50)\n    }\n\n\n    \n    return(\n        <>\n        <div style={{width:'35%',position: 'fixed', right: '60%', marginTop: '2%', marginBottom:'100'}}>\n        <Form ref={formRef} validated={validated}>\n        <Form.Group controlId=\"select.customer\">\n            <Form.Label>Customer: </Form.Label>\n            <Form.Control as=\"select\" value={JSON.stringify(customer)} style={{display:'inline', margin:5, width:'80%'}}\n                onChange = {e=> {\n                  setCustomer(JSON.parse(e.target.value));\n                  // console.log(e.target.value);\n                  \n                  document.getElementById('editTask.Details').focus();\n                \n                }}>\n              <option value={JSON.stringify(AllCustomers)}>{AllCustomers.CustomerName}</option>\n              {\n                customers.map((customer, index) => {\n                  return(<option key={index} value={JSON.stringify(customer)}>{customer.CustomerName}</option>)\n                })\n              }\n            </Form.Control>\n        </Form.Group>\n        <Form.Group className=\"mb-3\" controlId=\"editTask.Details\">\n            <Form.Control \n                as=\"textarea\" \n                rows={5} \n                placeholder=\"Details...\"\n                value={details}\n                onChange = {e=> setDetails(e.target.value)}\n                type=\"text\"\n                style={{backgroundColor:'#fbff85'}}\n            />\n        </Form.Group>\n        <Form.Group>\n            <DatePicker \n                selected={date} \n                onChange={(date) => setDate(date)} \n                dateFormat = 'dd/MM/yyyy'\n                calendarStartDay={1}\n            />\n        </Form.Group>\n        <Form.Group>\n        <Form.Label>Minutes:&nbsp;&nbsp;&nbsp;</Form.Label>\n            <Form.Check\n                inline\n                label=\"5\"\n                name=\"group1\"\n                type='radio'\n                id={`inline-radio-5m`}\n                onChange={e=> {\n                    setMinutes(5);\n                    setShowOther(false);\n                }}\n            />\n            <Form.Check\n                inline\n                label=\"10\"\n                name=\"group1\"\n                type='radio'\n                id={`inline-radio-10m`}\n                onChange={e=> {\n                    setMinutes(10);\n                    setShowOther(false);\n                }}\n            />\n            <Form.Check\n                inline\n                label=\"15\"\n                name=\"group1\"\n                type='radio'\n                id={`inline-radio-15m`}\n                onChange={e=> {\n                    setMinutes(15);\n                    setShowOther(false);\n                }}\n            />\n            <Form.Check\n                inline\n                label=\"30\"\n                name=\"group1\"\n                type='radio'\n                id={`inline-radio-30m`}\n                onChange={e=> {\n                    setMinutes(30);\n                    setShowOther(false);\n                }}\n            />\n            <Form.Check\n                inline\n                label=\"45\"\n                name=\"group1\"\n                type='radio'\n                id={`inline-radio-45m`}\n                onChange={e=> {\n                    setMinutes(45);\n                    setShowOther(false);\n                }}\n            />\n            <Form.Check\n                inline\n                label=\"60\"\n                name=\"group1\"\n                type='radio'\n                id={`inline-radio-60m`}\n                onChange={e=> {\n                    setMinutes(60);\n                    setShowOther(false);\n                }}\n            />\n            <Form.Check\n                inline\n                label=\"90\"\n                name=\"group1\"\n                type='radio'\n                id={`inline-radio-90m`}\n                onChange={e=> {\n                    setMinutes(90);\n                    setShowOther(false);\n                }}\n            />\n            <Form.Check\n                inline\n                label=\"120\"\n                name=\"group1\"\n                type='radio'\n                id={`inline-radio-120m`}\n                onChange={e=> {\n                    setMinutes(120);\n                    setShowOther(false);\n                }}\n            />\n            <Form.Check\n                inline\n                label=\"Other\"\n                name=\"group1\"\n                type='radio'\n                id={`inline-radio-other`}\n                onChange={e=> {\n                    setMinutes();\n                    setShowOther(true);\n                }}\n            />\n            {\n                showOther===true &&\n                <Form.Control \n                as=\"textarea\" \n                rows={1} \n                placeholder=\"Minutes\"\n                value={minutes}\n                onChange = {e=> setMinutes(e.target.value)}\n                type=\"text\"\n                style={{position:'absolute', right:0,  width: 120, display: 'inline'}}\n                />\n            }\n        </Form.Group>\n        <Form.Group>\n            <Form.Label>Actions: &nbsp;&nbsp;&nbsp;</Form.Label>\n            <Form.Check\n                inline\n                label=\"Phone\"\n                name=\"group2\"\n                type='checkbox'\n                id={`inline-check-phone`}\n                onChange = {e=> {\n                    if (phone==='N') {\n                      setPhone('Y');\n                    } else {\n                      setPhone('N');\n                    }\n                }} \n            />\n            <Form.Check\n                inline\n                label=\"Email\"\n                name=\"group2\"\n                type='checkbox'\n                id={`inline-check-email`}\n                onChange = {e=> {\n                    if (email==='N') {\n                      setEmail('Y');\n                    } else {\n                      setEmail('N');\n                    }\n                }} \n            />\n            <Form.Check\n                inline\n                label=\"Remote Access\"\n                name=\"group2\"\n                type='checkbox'\n                id={`inline-check-remote`}\n                onChange = {e=> {\n                    if (remote==='N') {\n                      setRemote('Y');\n                    } else {\n                      setRemote('N');\n                    }\n                }}\n            />\n            <Form.Check\n                inline\n                label=\"Site Visit\"\n                name=\"group2\"\n                type='checkbox'\n                id={`inline-check-sitevisit`}\n                onChange = {e=> {\n                    if (siteVisit==='N') {\n                      setSiteVisit('Y');\n                    } else {\n                      setSiteVisit('N');\n                    }\n                }}\n            />\n            <Form.Check\n                inline\n                label=\"Out of Hours\"\n                name=\"group2\"\n                type='checkbox'\n                id={`inline-check-outofhours`}\n                onChange = {e=> {\n                    if (outOfHours==='N') {\n                      setOutOfHours('Y');\n                    } else {\n                      setOutOfHours('N');\n                    }\n                }}\n            />\n        </Form.Group>\n        <Form.Group controlId=\"support.ReasonSelect\">  \n            <Form.Label>Reason: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</Form.Label>\n            <Form.Control as=\"select\" value={reasons.Reason} style={{display:'inline', margin:5, width:'80%'}}\n                onChange = {e=> setSelectedReason(JSON.parse(e.target.value))}>\n                <option value={AllReasons}>{AllReasons.Reason}</option>\n              {\n                reasons.map((reason, index) => {\n                  return(<option key={index} value={JSON.stringify(reason)}>{reason.Reason}</option>)\n                })\n              }\n            </Form.Control>\n        </Form.Group>\n        <OverlayTrigger key='save-task' placement='bottom'\n            overlay={\n              <Tooltip id='tooltip-save'>\n                Save\n              </Tooltip>\n            }\n        >\n            <Button onClick={onSubmit} className=\"button-to-the-right\" variant=\"secondary\" >\n                <h4><FaSave /></h4>\n            </Button>\n        </OverlayTrigger>\n        \n        </Form>\n        </div>\n        <div style={{width:'40%',position: 'absolute', left: '50%', marginTop: '2%'}}>\n            <SupportSummary customer={customer.SupportCode} />\n        </div>\n        </>\n    )\n}\n\nexport default QuickSupport;","import  React, {useEffect, useState}  from \"react\";\n\nimport {returnCustomers, returnUsers} from '../../Tasks/returnTasks';\nimport moment from 'moment'\n//ReactDataGrid.io used for main grid\nimport ReactDataGrid from '@inovua/reactdatagrid-community'\nimport '@inovua/reactdatagrid-community/base.css'\nimport '@inovua/reactdatagrid-community/index.css'\nimport '@inovua/reactdatagrid-community/theme/default-dark.css'\n\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Form from 'react-bootstrap/Form'\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger'\nimport Tooltip from 'react-bootstrap/Tooltip'\nimport Button from 'react-bootstrap/Button'\nimport {ImFilePdf} from 'react-icons/im'\n\n\n//React-DatePicker used for date inputs\nimport DatePicker from 'react-datepicker'\nimport 'react-datepicker/dist/react-datepicker.css'\n\nimport { exportClosedPDF } from '../../excelExport.js'\n\n\nfunction getClosedTasks(customer, user, startDate, endDate) {\n    return fetch('/getCloseTaskGrid/' + customer + '&' + user + '&' + startDate + '&' + endDate)\n     .then(data => data.json())\n  }\n\nfunction Closed() {\n  //----- GET CURRENT USER -----//\n    const tokenString = sessionStorage.getItem('token');\n    const userToken = JSON.parse(tokenString);\n    const Username = userToken.username;\n    const UserID = userToken.userId;\n\n    const AllCustomers = {\n        \"SupportCode\":0,\n        \"Customer_Code\":0,\n        \"CustomerName\":\"All Customers\",\n        \"CustomerCode\":0\n      }\n      //const AllDepartments = {\n      //  'Code': 0,\n      //  'Department': 'All Departments'\n      //}\n      const AllUsers = {\n        'Username': 'None Selected',\n        'UserId': 0\n      }\n      const currentUserObj = {\n        'UserId': userToken.userId,\n        'Username':  userToken.username\n      }\n\n    \n\n    const HQDetails={\n        'SupportCode' : 0,\n        'Customer_Code' : 340,\n        'CustomerName' : \"HQ Software\",\n        'CustomerCode': 340\n    }\n\n    \n    const [dataSource, setDataSource] = useState([]);\n\n    //Store reference to grid for exporting PDF/CSV\n    const [gridRef, setGridRef] = useState(null);\n\n    //setting departments/users/customers for drop downs\n    //const [departments, setDepartments] = useState([]);\n    const [customers, setCustomers] = useState([]);\n    const [users, setUsers] = useState([]);\n\n    const [filterUser, setFilterUser] = useState(currentUserObj);\n    const [filterCustomer, setFilterCustomer] = useState(AllCustomers);\n    //const [filterDepartment, setFilterDepartment] = useState(AllDepartments);\n\n    //Dates for DateRange\n    var tomorrow = new Date();\n    tomorrow.setDate(tomorrow.getDate()+1);\n    const [startDate, setStartDate] = useState(new Date());\n    const [endDate, setEndDate] = useState(tomorrow);\n\n    useEffect(() => {\n        let mounted = true;\n        var sDate = moment(startDate).format('YYYY-MM-DDT00:00:00');\n        var eDate = moment(endDate).format('YYYY-MM-DDT11:59:59');\n\n\n        let data = getClosedTasks(filterCustomer.Customer_Code, filterUser.UserId, sDate, eDate);\n        //console.log(data);\n        setDataSource(data);\n\n        returnCustomers()\n        .then(customers => {\n            if(mounted) {\n          setCustomers(customers)\n            }\n        })\n        //returnDepartments()\n        //  .then(departments => {\n        //    if(mounted) {\n        //      setDepartments(departments);\n        //    }\n        //  })\n        returnUsers()\n          .then(users => { \n            if(mounted) {\n              setUsers(users)\n            }\n          })\n\n          return () => mounted = false;\n    },[filterUser, filterCustomer.Customer_Code, startDate, endDate])\n    \n    //Grid Info\n    const theme = 'default-dark'\n\n    const gridStyle = {\n      //maxWidth: '80%',  \n      minHeight: 715, \n      //marginRight: 10,\n      //marginLeft: 10,\n      //marginBottom: 100,\n      position: 'absolute',\n      left: '300px',\n      top: 150,\n      width: '82%'\n    }\n\n    const columns = [\n        {name:'Task', header:'ID', type: 'number', defaultFlex: 1, maxWidth:70},\n        {name:'Customer', header:'Customer', defaultFlex: 1, maxWidth: 200, minWidth: 150},\n        {name:'Details', header:'Details', defaultFlex: 1, minWidth: 500},\n        {name:'Owner_Name', header:'Owner', defaultFlex: 1},\n        {name:'ActionByUsername', header:'Allocated To', defaultFlex: 1},\n        {name:'Requested', header:'Requested', defaultFlex: 1, maxWidth: 115, \n          sort: (a, b) => {\n            a = moment(a, 'DD/MM/YYYY', true).format();\n            b = moment(b, 'DD/MM/YYYY', true).format();\n    \n            return new Date(a) - new Date(b);\n         }\n        },\n        {name:'DateCompleted', header:'Date Complete', defaultFlex: 1, maxWidth: 115, \n          sort: (a, b) => {\n            a = moment(a, 'DD/MM/YYYY', true).format();\n            b = moment(b, 'DD/MM/YYYY', true).format();\n    \n            return new Date(a) - new Date(b);\n         }\n        },\n        {name:'Estimate', header:'Estimate', defaultFlex: 1, maxWidth: 130},\n        {name:'TimeSpent', header:'Minutes Spent', defaultFlex: 1, maxWidth: 100},\n        {name:'DaysToComplete', header:'Days To Complete', defaultFlex: 1, maxWidth: 100}\n    ]\n\n    \n\n    return (\n        <>\n\n        <OverlayTrigger key='PDFEXPORT' placement='bottom'\n          overlay={\n            <Tooltip id='tooltip-pdf'>\n              Export to PDF\n            </Tooltip>\n          } \n        >\n          <Button variant=\"secondary\" style={{margin:5, position:'absolute', bottom:'810px', right:50}} \n          \tonClick={ () => {\n              const gridData = gridRef;\n              exportClosedPDF(gridData, filterCustomer);\n              //console.log(gridData);\n            }}\n            className=\"button-to-the-right\"\n          >\n            <ImFilePdf />\n          </Button>    \n        </OverlayTrigger>\n\n        <Row xs=\"auto\" style={{position:'absolute', left: '300px', bottom: '800px'}}> \n        <Col>\n            <h1 class=\"font-weight-light\">Closed Tasks</h1>    \n        </Col>\n        <Col>\n             <Form.Group controlId=\"FILTER.CUSTSelect\">\n              <Form.Control as=\"select\" value={JSON.stringify(filterCustomer)} style={{ margin:5, width:200}}\n                onChange = {e=> {\n                  setFilterCustomer(JSON.parse(e.target.value));\n                  //console.log(e.target.value);\n                }}>\n              <option value={JSON.stringify(AllCustomers)}>{AllCustomers.CustomerName}</option>\n              <option value={JSON.stringify(HQDetails)}>{HQDetails.CustomerName}</option>\n              {\n                customers.map((customer, index) => {\n                  return(<option key={index} value={JSON.stringify(customer)}>{customer.CustomerName}</option>)\n                })\n              }\n              </Form.Control>\n            </Form.Group>\n            </Col>\n            <Col>\n            <Form.Control as=\"select\" value={JSON.stringify(filterUser)} style={{ margin:5, width:100}}\n                onChange = {e=> {\n                  //let temp=JSON.parse(e.target.value);\n                  //setFilterUserName(temp.Username);\n                  setFilterUser(JSON.parse(e.target.value));\n                }}>\n              <option value ={JSON.stringify(currentUserObj)}>{currentUserObj.Username}</option>\n              {\n                users.map((user, index) => {\n                  if(user.Username!==currentUserObj.Username) {\n                    return(<option key={index} value={JSON.stringify(user)}>{user.Username}</option>)\n                  }\n                  else return;\n                })\n              }\n              <option value={JSON.stringify(AllUsers)}>All Users</option>\n            </Form.Control>\n            </Col>\n            <Col>\n            <div style={{'margin': '10px'}}>\n              <DatePicker\n              selected={startDate}\n              onChange={(date) => {\n                setStartDate(date);\n              }}\n              selectsStart\n              startDate={startDate}\n              endDate={endDate}\n              dateFormat = 'dd/MM/yyyy'\n            />\n            </div>\n            \n            </Col>\n            \n            <Col>\n            <div style={{'margin': '10px'}}>\n              <DatePicker\n              selected={endDate}\n              onChange={(date) => {\n                setEndDate(date);\n              }}\n              selectsEnd\n              startDate={startDate}\n              endDate={endDate}\n              minDate={startDate}\n              dateFormat = 'dd/MM/yyyy'\n            />\n            </div>\n            </Col>\n            \n            </Row>\n\n            \n            \n        \n\n        <ReactDataGrid\n        \n            //rowClassName={rowClassName}\n            handle={setGridRef}\n            idProperty=\"Task\"\n            columns={columns}\n            dataSource={dataSource}\n            style={gridStyle}\n            theme={theme}\n            //onRenderRow={onRenderRow}\n            //selected={selected}\n            //checkboxColumn\n            //onSelectionChange={onSelectionChange}\n            //defaultSortInfo={defaultSortInfo}\n                \n        />\n        </>\n    )\n}\n\nexport default Closed;","import React, { useState, useEffect, PureComponent } from \"react\";\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\n\n//React-DatePicker used for date inputs\nimport DatePicker from 'react-datepicker'\nimport 'react-datepicker/dist/react-datepicker.css'\nimport moment from 'moment'\n\nimport Form from 'react-bootstrap/Form'\n\n//Charts\n//import { Bar } from 'react-chartjs-2'\nimport { BarChart, Bar, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\n\n\n\n\n\nimport {getUserReport, getSupportReport, getUserPie} from './getData.js'\nimport {returnUsers} from '../../Tasks/returnTasks.js'\n\nfunction getTimeSpent(startDate, endDate, filterUser) {\n  return fetch('/getTimeSpent/'+startDate+'&'+endDate+'&'+filterUser)\n    .then(data => data.json())\n}\n\n\nfunction Reports() {\n    var tomorrow = new Date();\n    tomorrow.setDate(tomorrow.getDate()+1);\n    const [startDate, setStartDate] = useState(new Date());\n    const [endDate, setEndDate] = useState(tomorrow);\n\n    const [users, setUsers] = useState([]);\n\n    \n    \n    //----- GET CURRENT USER -----//\n  const tokenString = sessionStorage.getItem('token');\n  const userToken = JSON.parse(tokenString);\n  //const Username = userToken.username;\n\n  const currentUserObj = {\n      'UserId': userToken.userId,\n      'Username':  userToken.username\n  }\n  const [filterUser, setFilterUser] = useState(currentUserObj);\n  const [labels, setLabels] = useState([]);\n\n  //const [taskReport, setTaskReport] = useState();\n  //const [supportReport, setSupportReport] = useState();\n\n  const [taskReportData, setTaskReportData] = useState([]);\n  const [supportReportData, setSupportReportData] = useState([]);\n\n    const [data, setData] = useState([]);\n    \n\n    useEffect(()=> {\n      //loadData();\n\n\n      var tempLabels = [];\n      var taskData = [];\n      var supportData = [];\n    \n      var sDate = moment(startDate).format('YYYY-MM-DDT00:00:00');\n      var eDate = moment(endDate).format('YYYY-MM-DDT11:59:59');\n\n      //console.log(filterUser);\n      getTimeSpent(sDate, eDate, filterUser.UserId).then(report=> {\n        for(let i=0; i<report.length; i++) {\n          taskData.push(report[i].TaskTime);\n          supportData.push(report[i].SupportTime);\n          tempLabels.push(report[i].Customer);\n          \n        }\n        setData(report);\n      })\n\n      \n      setLabels(tempLabels);\n\n      setTaskReportData(taskData);\n      setSupportReportData(supportData);\n\n     //console.log(labels);\n     //console.log(supportReportData);\n     //console.log(taskReportData);\n\n     console.log(data);\n\n      returnUsers()\n      .then(users => { \n          setUsers(users)     \n      }) \n\n      //console.log(users);\n    }, [startDate, endDate, filterUser]) \n\n      \n\n      const AllUsers = {\n        'Username': 'none',\n        'UserId': ''\n      }\n\n      \n  \n  return (\n    <div style={{position:'absolute', left: '300px', top: '100px', width: '80%'}}>\n\n<Container>\n        <Row>\n            <Col>\n            <h1 class=\"font-weight-light\">Time Spent</h1>\n            \n            </Col>\n            <Col>\n            <div style={{'margin': '5px', 'width':'300px'}}>\n            <DatePicker\n              selected={startDate}\n              onChange={(date) => {\n                setStartDate(date);\n              }}\n              selectsStart\n              startDate={startDate}\n              endDate={endDate}\n              dateFormat = 'dd/MM/yyyy'\n            />\n            </div>\n            </Col>\n            <Col>\n            <div style={{'margin': '5px', 'width':'300px'}}>\n            <DatePicker\n              selected={endDate}\n              onChange={(date) => {\n                setEndDate(date);\n              }}\n              selectsEnd\n              startDate={startDate}\n              endDate={endDate}\n              minDate={startDate}\n              dateFormat = 'dd/MM/yyyy'\n            />\n            \n            </div>\n\n            </Col>\n            <Col>\n              <Form.Control as=\"select\" value={users.Username} style={{ margin:5, width:100, display: 'inline'}}\n                  onChange = {e=> {\n                    let temp=JSON.parse(e.target.value);\n                    setFilterUser(temp);\n                  }}>\n                <option value ={JSON.stringify(currentUserObj)}>{currentUserObj.Username}</option>\n                {\n                  users.map((user, index) => {\n                    if(user.Username!==currentUserObj.Username) {\n                      return(<option key={index} value={JSON.stringify(user)}>{user.Username}</option>)\n                    }\n                    else return;\n                  })\n                }\n                <option value={JSON.stringify(AllUsers)}>All Users</option>\n              </Form.Control>\n            </Col>\n\n        </Row>\n        <Row>\n          <Col>\n          \n          <BarChart width={1300} height={700} data={data}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"Customer\" />\n            <YAxis />\n            <Tooltip />\n            \n            <Bar dataKey=\"SupportTime\" fill=\"#CEEAF7\" />\n            <Bar dataKey=\"TaskTime\" fill=\"#82ca9d\" />\n          </BarChart>\n          \n          \n          </Col>\n        </Row>\n        \n    </Container>\n\n    </div>\n    \n  );\n}\n\nexport default Reports","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport {Link} from 'react-router-dom'\nimport { Closed, Reports } from '.'\n\n\nimport './custom.scss'\nimport { ProSidebar, Menu, MenuItem, SidebarContent } from 'react-pro-sidebar';\n//import 'react-pro-sidebar/dist/css/styles.css';\n\nimport { GoIssueClosed } from 'react-icons/go'\nimport { BiTimeFive } from 'react-icons/bi'\n\n\n\nfunction ReportMenu() {\n\n    \n    \n    return(\n    <ProSidebar breakpoint=\"xl\">\n      <SidebarContent>\n        <Menu iconShape=\"circle\">\n        \n        \n        <MenuItem icon={<BiTimeFive/>}>\n            Time Spent\n        <Link to=\"/Report1\" />\n        </MenuItem>\n        <MenuItem icon={<GoIssueClosed />}>\n            Closed Tasks\n        <Link to=\"/Report1/Closed\" />\n        </MenuItem>\n      </Menu>\n      </SidebarContent>\n      <div style={{height: '80vh', display: 'inline'}}></div>\n      \n    </ProSidebar>\n    ) \n}\n\nexport default ReportMenu;","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { Reports, Closed, ReportMenu } from \"./components1\";\n\nfunction Report1() {\n\n    return (\n        <div className=\"Report1\">\n          \n          <Router>\n            <ReportMenu />\n            <Switch>\n             \n              <Route path=\"/Report1\" exact component={() => <Reports />} />\n              <Route path=\"/Report1/Closed\" exact component={() => <Closed />} />\n              \n            </Switch>\n          </Router>\n        </div>\n      );\n}\n\nexport default Report1;","import React, {  useState, useEffect, useCallback } from 'react';\n\nimport './alerts.css';\n\nimport Form from 'react-bootstrap/Form'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport moment from 'moment'\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger'\nimport Tooltip from 'react-bootstrap/Tooltip'\nimport Button from 'react-bootstrap/Button'\nimport Modal from 'react-bootstrap/Modal'\n\nimport { AiOutlineFlag } from 'react-icons/ai'\n\n\n\n//ReactDataGrid.io used for main grid\nimport ReactDataGrid from '@inovua/reactdatagrid-community'\nimport '@inovua/reactdatagrid-community/base.css'\nimport '@inovua/reactdatagrid-community/index.css'\nimport '@inovua/reactdatagrid-community/theme/default-dark.css'\n\nconst returnErrors = (code) => {\n    return fetch('/returnErrors/' + code).then(response => {\n      return response.json()\n    });\n}\nasync function returnCustomers() {\n    const response = await fetch('/returnCustomers');\n    const customers = await response.json();\n    return customers\n}\n\nconst returnAlerts = () => {\n    return fetch('/returnAlerts').then(response => {\n      return response.json()\n    });\n}\n\nconst processErrorConfirmed = (key) => {\n    const requestOptions = {\n      method: 'PUT',\n      headers: { 'Content-Type': 'application/json'},\n      body: JSON.stringify({\n        detail: key\n      })\n    }\n    return fetch('/processErrorConfirmed', requestOptions)\n  }\n\n  const processErrorReviewed = (key) => {\n    const requestOptions = {\n      method: 'PUT',\n      headers: { 'Content-Type': 'application/json'},\n      body: JSON.stringify({\n        detail: key\n      })\n    }\n    return fetch('/processErrorReviewed', requestOptions)\n  }\n\nfunction Errors() {\n\n    const [errorList, setErrorList] = useState([]);\n    const [currentCustomer, setCurrentCustomer] = useState({});\n    const [customers, setCustomers] = useState([]);\n\n    useEffect(() => {\n        let mounted = true;\n\n        setCurrentCustomer(JSON.parse(localStorage.getItem('CustomerErrorCheck')));\n        //console.log(JSON.parse(localStorage.getItem('CustomerErrorCheck')).CustomerCode);\n        \n        returnErrors(JSON.parse(localStorage.getItem('CustomerErrorCheck')).CustomerCode).then((data) => {\n            if(mounted) {\n                setErrorList(data);   \n            }       \n        });\n\n        returnAlerts()\n            .then(customers => {\n              if(mounted) {\n                setCustomers(customers)\n              }\n            })\n        //console.log(customers);\n        return () => mounted = false;\n        //console.log(currentCustomer);\n    }, []);\n\n    const reLoadGrid = (customer) => {\n        returnErrors(customer.CustomerCode).then((data) => {\n                setErrorList(data);         \n        });\n    }\n\n    const columns = [\n        {name: 'Customer_Name', header: 'Customer', minWidth:250, type: 'string'},\n        {name: 'Details', header: 'Details', minWidth:1200, type: 'string'},\n        //{name: 'Status', header: 'Status', maxWidth:75, type: 'string'},\n        {name: 'ErrorDate', header: 'Error Date', type: 'string', maxWidth:250, minWidth:200,\n            sort: (a, b) => {\n                a = moment(a, 'DD/MM/YYYY, HH:mm:ss', true).format();\n                b = moment(b, 'DD/MM/YYYY, HH:mm:ss', true).format();\n    \n                return new Date(a) - new Date(b);\n            }\n        },\n        {name: 'UploadDate', header: 'Upload Date', type: 'string', maxWidth:250, minWidth:200,\n            sort: (a, b) => {\n                a = moment(a, 'DD/MM/YYYY, HH:mm:ss', true).format();\n                b = moment(b, 'DD/MM/YYYY, HH:mm:ss', true).format();\n    \n                return new Date(a) - new Date(b);\n            }\n        }\n    ]\n\n    const gridStyle = { minHeight:750, margin:10 }\n    const theme = 'default-dark'\n\n    //Sets data for the rows that are checked\n  const [selected, setSelected] = useState({});\n\n    const onSelectionChange = useCallback(({ selected }) => {\n        if(selected!==true){\n          setSelected(selected);\n        }\n    \n        //console.log(JSON.stringify(toArray(selected)));\n        //console.log(selected)\n          \n      }, [])\n\n    const [showPrompt, setShowPrompt] = useState(false);\n    const handleClosePrompt = () => {\n      setShowPrompt(false);\n      setSelected({});\n\n      reLoadGrid(currentCustomer);\n    }\n\n    const confirmErrors = () => {\n        Object.keys(selected).forEach(function(key) {\n            console.log(key);\n            processErrorConfirmed(key);\n        })\n\n        handleClosePrompt();\n    }\n\n    const reviewErrors = () => {\n      Object.keys(selected).forEach(function(key) {\n          console.log(key);\n          processErrorReviewed(key);\n      })\n\n      handleClosePrompt();\n  }\n\n  //Allows button to be pressed when some tasks are selected\n  let editIsDisabled = true;\n  if(JSON.stringify(selected).length<3) {\n    //console.log(selected);\n    editIsDisabled = true;\n  } else {\n    editIsDisabled = false;\n  }\n  //----------//\n\n  /*\n  //DoubleClick Func\n  const [showModal, setShowModal] = useState(false);\n  const [currError, setCurrError] = useState(\"\");\n\n  const handleCloseModal = () => {\n    setShowModal(false);\n    setCurrError(\"\");\n  }\n\n  const onRowDoubleClick = useCallback((rowProps) => { \n    setShowModal(true);\n    setCurrError(JSON.stringify(rowProps.data.Details));\n    //console.log(rowProps.data.Details);\n\n  }, []);\n\n  const onRenderRow = useCallback((rowProps) => {\n    const { onDoubleClick } = rowProps;\n    \n    rowProps.onDoubleClick = (event) => {\n      onRowDoubleClick(rowProps);\n      if (onDoubleClick) {\n        onDoubleClick(event);\n      }\n    };\n\n\n\n\n    \n  }, [onRowDoubleClick])\n\n  */\n\n    return(\n        <>\n        <div className='errors'>\n        <Row xs=\"auto\">\n           <Col>\n            <h3>Total Errors: {currentCustomer.ErrorCount}</h3>\n           </Col>\n           <Col>\n           <OverlayTrigger key='Make-Urgent' placement='bottom'\n              overlay={\n                <Tooltip id='tooltip-pdf'>\n                  Flag Selected Errors\n                </Tooltip>\n              }\n            >\n        <Button variant =\"secondary\"  \n          onClick={() => {\n            setShowPrompt(true);\n          }}\n          disabled={editIsDisabled}\n          className='button-to-the-right'\n          >\n              <AiOutlineFlag />\n        </Button>\n        </OverlayTrigger>\n           </Col>\n           <Col >\n            <Form.Control as=\"select\" value={JSON.stringify(currentCustomer)} style={{ display:'inline', margin:5, width:400, marginLeft:800}}\n                onChange = {e=> {\n                    setCurrentCustomer(JSON.parse(e.target.value));\n                    //console.log(e.target.value);\n                    reLoadGrid(JSON.parse(e.target.value));\n                }}>\n              \n              {\n                  customers.map((customer, index) => {\n                      return(<option key={index} value={JSON.stringify(customer)}>{customer.Customer_Name}</option>)\n                    })\n                }\n              </Form.Control>\n            </Col>\n        </Row>\n            \n\n              <ReactDataGrid \n                idProperty=\"Details\"\n                columns={columns}\n                dataSource={errorList}\n                style={gridStyle}\n                theme={theme}\n                selected={selected}\n                checkboxColumn\n                onSelectionChange={onSelectionChange}\n                editable={true}\n                //onRenderRow={onRenderRow}\n              />\n\n\n        <Modal show={showPrompt} onHide={handleClosePrompt}>\n            <Modal.Header closeButton>\n              <Modal.Title>Flag Errors</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>How do you want to flag the selected Errors?</Modal.Body>\n            <Modal.Footer>\n              <Button variant=\"secondary\" onClick={handleClosePrompt}>\n                Cancel\n              </Button>\n              <Button variant=\"primary\" onClick={reviewErrors}>\n                Reviewed\n              </Button>\n              <Button variant=\"primary\" onClick={confirmErrors}>\n                Confirmed\n              </Button>\n            </Modal.Footer>\n        </Modal>\n\n\n        \n\n            \n       \n        </div>\n        </>\n\n    )\n}\n\nexport default Errors;","import React, {useState, useEffect, useCallback} from 'react'\n\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger'\nimport Tooltip from 'react-bootstrap/Tooltip'\nimport Button from 'react-bootstrap/Button'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport Modal from 'react-bootstrap/Modal'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Form from 'react-bootstrap/Form'\n\nimport {RiFileAddLine} from \"react-icons/ri\"\n\nconst newUpdateID = () => {\n  return fetch('/newUpdateId').then(response => {\n    return response.json()\n  });\n}\n\nfunction addUpdateHeader(username, version, productID) {\n  const requestOptions = {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({\n      Username: username,\n      Version: version,\n      ProductID: productID\n    })\n  }\n  return fetch('/addUpdateHeader/', requestOptions)\n   \n}\n\nfunction addUpdateDetail(updateId, details, comment) {\n  const requestOptions = {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({\n      UpdateId: updateId,\n      Details: details,\n      Comment: comment\n    })\n  }\n  return fetch('/addUpdateDetail/', requestOptions)\n   \n}\n\nfunction addUpdateSQL(updateId, sql) {\n  const requestOptions = {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({\n      UpdateId: updateId,\n      Sql: sql\n    })\n  }\n  return fetch('/addUpdateSQL/', requestOptions)\n   \n}\n\nfunction NewVersion (props) {\n\n  //----- GET CURRENT USER -----//\n  const tokenString = sessionStorage.getItem('token');\n  const userToken = JSON.parse(tokenString);\n  const Username = userToken.username;\n  //const UserID = userToken.userId;\n\n    const [show, setShow] = useState(false);\n\n    const [version, setVersion] = useState(\"\");\n    const [details, setDetails] = useState(\"\");\n    const [sql, setSQL] = useState(\"\");\n    const [comment, setComment] = useState(\"\");\n\n    const handleClose= () => {\n        setShow(false);\n\n        setVersion(\"\");\n        setDetails(\"\");\n        setSQL(\"\");\n        setComment(\"\");\n    }\n\n    const onSubmit = () => {\n      newUpdateID().then(id=> {\n          //console.log(id.[0].[\"\"]);\n        addUpdateHeader(Username, version, props.product.ProductID).then( ()=> {\n          addUpdateDetail(id.[0].[\"\"], details, comment).then( ()=> {\n            addUpdateSQL(id.[0].[\"\"], sql);\n          });\n        });\n      });\n\n      handleClose();\n    }\n\n    return(\n        <>\n        <OverlayTrigger key='NewVersion' placement='bottom'\n          overlay={\n            <Tooltip id='tooltip-newversion'>\n              New Version\n            </Tooltip>\n          }\n        >\n        <Button variant=\"secondary\" style={{margin:5}} \n      \tonClick={ () => {\n          setShow(true);  \n        }}\n        className=\"button-to-the-left\"\n        >\n           <RiFileAddLine/>\n        </Button>\n        </OverlayTrigger>\n\n\n        <Modal show={show} onHide={handleClose} size='lg'>\n        <Modal.Header closeButton>\n          <Modal.Title>New Version - {props.product.ProductName} </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          \n          \n          <Form>\n          <Row>\n            <Col xs={2}>\n              <h7>Version:</h7>\n            </Col>\n            <Col>  \n              <Form.Control \n                style={{display:'inline'}}\n                size=\"sm\"\n                as=\"textarea\" \n                rows={1}\n                type=\"text\"\n                value={version}\n                onChange = {e=> setVersion(e.target.value)}\n              />\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <Form.Group className=\"mb-3\" controlId=\"newTask.Details\">\n                <h7>Description:</h7>\n                <Form.Control \n                  as=\"textarea\" \n                  rows={3} \n                  placeholder=\"Add Decription...\"\n                  value={details}\n                  onChange = {e=> setDetails(e.target.value)}\n                  type=\"text\"\n                  size=\"sm\"\n                />\n              </Form.Group>\n            </Col>\n          </Row>\n          <Row>  \n            <Col>\n              <Form.Group className=\"mb-3\" controlId=\"newTask.Notes\">\n                <h7>SQL:</h7>\n                <Form.Control \n                  as=\"textarea\" \n                  rows={3} \n                  placeholder=\"Add SQL...\"\n                  value={sql}\n                  onChange = {e=> setSQL(e.target.value)}\n                  type=\"text\"\n                  size=\"sm\"\n                />\n              </Form.Group>\n            </Col>\n          </Row>\n          <Row>  \n            <Col>\n              <Form.Group className=\"mb-3\" controlId=\"newTask.Notes\">\n                <h7>Comment:</h7>\n                <Form.Control \n                  as=\"textarea\" \n                  rows={3} \n                  placeholder=\"Add Comment...\"\n                  value={comment}\n                  onChange = {e=> setComment(e.target.value)}\n                  type=\"text\"\n                  size=\"sm\"\n                />\n              </Form.Group>\n            </Col>\n          </Row>\n          </Form>\n    \n        </Modal.Body>\n        <Modal.Footer>          \n          <Button variant=\"secondary\" onClick={handleClose}>\n            Close\n          </Button>\n          <Button variant=\"primary\" onClick={()=>{\n            onSubmit();\n            handleClose();\n          }}>\n            Create Version\n          </Button>\n        </Modal.Footer>\n      </Modal>\n        </>\n    )\n}\n\nexport default NewVersion;","import React, {useState, useEffect, useCallback} from 'react'\n\n//ReactDataGrid.io used for main grid\nimport ReactDataGrid from '@inovua/reactdatagrid-community'\nimport '@inovua/reactdatagrid-community/base.css'\nimport '@inovua/reactdatagrid-community/index.css'\nimport '@inovua/reactdatagrid-community/theme/default-dark.css'\n\nimport Form from 'react-bootstrap/Form'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport moment from 'moment'\n\nimport './products.css'\nimport NewVersion from './NewVersion.jsx';\n\nconst returnProductGrid = (id) => {\n    return fetch('/returnProductGrid/' + id).then(response => {\n      return response.json()\n    });\n}\n\nconst returnProductList = () => {\n    return fetch('/returnProductList').then(response => {\n      return response.json()\n    });\n}\n\nfunction Products  () {\n\n    const noSelected = {\n        MailingList: \"\",\n        ProductID: null,\n        ProductName: \"Select a Product\",\n        ProductURL: \"\"\n    }\n\n    const [dataSource, setDataSource] = useState({});\n    const [currentProduct, setCurrentProduct] = useState(noSelected);\n    const [products, setProducts] = useState([]);\n\n\n    const onChangeSelect = (product) => {\n        returnProductGrid(product.ProductID).then((data) => {\n                setDataSource(data);         \n        });\n        //console.log(products);\n    }\n\n    useEffect(() => {\n        let mounted = true;\n        \n        returnProductList().then((data) => {\n            if(mounted) {\n                setProducts(data);   \n            }       \n        });\n        \n        return () => mounted = false;\n        \n    }, []);\n\n    const columns = [\n        {name: 'Datetime', header: 'Date', type: 'string',\n            sort: (a, b) => {\n                a = moment(a, 'DD/MM/YYYY', true).format();\n                b = moment(b, 'DD/MM/YYYY', true).format();\n    \n                return new Date(a) - new Date(b);\n            }\n        },\n        {name: 'Version', header: 'Version', type: 'string'},\n        {name: 'Username', header: 'User', type: 'string'},\n        {name: 'UpdateDesc', header: 'Description', type: 'string', minWidth:1255}\n    ]\n    const gridStyle = { minHeight:750, margin:10 }\n    const theme = 'default-dark'\n    //const defaultSortInfo = { name: 'Version', dir: -1 }\n\n    return(\n        <>\n        <div className='Products'>\n            <Row size='xs'>\n                <Col>\n                    <NewVersion product={currentProduct} />\n                </Col>\n                <Col>\n                <h3>{currentProduct.ProductName}</h3>\n                </Col>\n                <Col>\n                <h6 className='productURL'><a href={currentProduct.ProductURL}>{currentProduct.ProductURL}</a></h6>\n                </Col>\n                <Col>\n                </Col>\n                <Col >\n                    <Form.Control as=\"select\" value={JSON.stringify(currentProduct)} style={{ display:'inline', margin:5, width:400}}\n                        onChange = {e=> {\n                            setCurrentProduct(JSON.parse(e.target.value));\n                            //console.log(e.target.value);\n                            onChangeSelect(JSON.parse(e.target.value));\n                        }}>\n                        <option key={0} value={JSON.stringify(noSelected)}>{noSelected.ProductName}</option>\n                        {\n                          products.map((product, index) => {\n                              return(<option key={index} value={JSON.stringify(product)}>{product.ProductName}</option>)\n                            })\n                        }\n                    </Form.Control>\n                </Col>\n            </Row>\n            <Row>\n                <ReactDataGrid \n                    idProperty=\"id\"\n                    columns={columns}\n                    dataSource={dataSource}\n                    style={gridStyle}\n                    theme={theme}\n                    editable={true}\n                    //defaultSortInfo={defaultSortInfo}\n                />\n            </Row>\n            \n\n        </div>\n        </>\n    )\n}\n\nexport default Products;","export default __webpack_public_path__ + \"static/media/HQicon.9e6c548a.ico\";","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Login.css';\n\nimport Footer from './../Footer.jsx'\n\nimport HQicon from './HQicon.ico'\n\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nasync function loginUser(credentials) {\n  return fetch('/login', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(credentials)\n  })\n    .then(data => data.json())\n}\n\nexport default function Login({ setToken }) {\n  const [username, setUserName] = useState('');\n  const [password, setPassword] = useState('');\n\n  const handleSubmit = async e => {\n    checkDueDate();\n\n    \n    e.preventDefault();\n    const token = await loginUser({\n        username,\n        password\n    });\n    \n    \n    if(token.token!=='q>)*8n[TfhTyZAW'){\n        alert('Invalid Username/Password');\n        setUserName('');\n        setPassword('');\n    } else{\n        setToken(token);\n    }\n     \n    \n  }\n\n  const checkDueDate = () =>{\n    //console.log(\"checkDueDate Method\");\n    const requestOptions = {\n      method: 'PUT',\n      headers: { 'Content-Type': 'application/json'}\n    }\n    return fetch('/checkDueDate/', requestOptions)  \n  }\n  \n  return(\n    <>\n    \n    \n    <div className=\"login-logo\"><img src={HQicon} alt=\"logo\" /></div>\n    <div className=\"login-wrapper\">\n      <h2>HQ Business - Log In</h2>\n      <Form>\n        <Form.Group className=\"mb-3\" controlId=\"emailInput\">\n          <Form.Label>User:</Form.Label>\n          <Form.Control type=\"email\" placeholder=\"Enter username\" onChange={e => setUserName(e.target.value)}/>\n        </Form.Group>\n        <Form.Group className=\"mb-3\" constrolId=\"passwordInput\">\n          <Form.Label>Password:</Form.Label>\n          <Form.Control type=\"password\" placeholder=\"Password\" onChange={e => setPassword(e.target.value)} />\n        </Form.Group>\n        <Button variant=\"secondary\" type=\"submit\" onClick={handleSubmit} className=\"button-to-the-right\">\n          Submit\n        </Button>\n      </Form>\n    </div>\n\n    <Footer />\n    </>\n  )\n\n  \n}\n\nLogin.propTypes = {\n    setToken: PropTypes.func.isRequired\n}","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { Navigation, Tasks, Footer, Report1, QuickSupport, Errors, Products } from \"./components\";\nimport useToken from './useToken.js';\nimport Login from './components/Login/Login'\n\n\n\nfunction App() {\n  \n  const { token, setToken } = useToken();\n  \n  if(token && token!=='q>)*8n[TfhTyZAW') {\n    alert(\"Invalid Log-in Token\");\n    localStorage.removeItem('token');\n  }\n  \n  \n  if(!token) {\n    return <Login setToken={setToken} />\n  }\n  \n  \n  \n  return (\n    <div className=\"App\">\n      <Router>\n        <Navigation />\n        <Switch>\n         \n          <Route path=\"/\" exact component={() => <Tasks />} />\n          \n          <Route path=\"/Report1\" exact component={() => <Report1 />} />\n          <Route path=\"/Support\" exact component={() => <QuickSupport />} />\n          <Route path=\"/Products\" exact component={() => <Products />} />\n\n          <Route path=\"/Errors\" exact component={() => <Errors />} />\n        </Switch>\n        <Footer />\n        \n      </Router>\n    </div>\n  );\n}\nexport default App;","import { useState } from 'react';\n\nexport default function useToken() {\n    const getToken = () => {\n        const tokenString = sessionStorage.getItem('token');\n        const userToken = JSON.parse(tokenString);\n        return userToken?.token\n    };\n    \n    const [token, setToken] = useState(getToken());\n\n    const saveToken = userToken => {\n        sessionStorage.setItem('token', JSON.stringify(userToken));\n        setToken(userToken.token);\n    };\n\n    return {\n        setToken: saveToken,\n        token\n    }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n\n"],"sourceRoot":""}